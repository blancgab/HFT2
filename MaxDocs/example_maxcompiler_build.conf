# Example MaxCompiler Configuration File
# To customize your MaxCompiler configuration, copy this file
# to /yourhomedir/.MaxCompiler_build_user.conf and edit as appropriate

# 
# Build options
#

# Builds are placed in a directory made up of three components:
# <root_dir> <datestamp> <user-specified>
# The <root> and <datestamp> components are specified in this file
# The user specified portion is given when a BuildManager is constructed
# Date-stamping will be applied with build.datestamp_builds = true.
# Date-stamp format is used specified using the Java SimpleDataFormat format.
build.root_dir = ${MAXCOMPILER_BUILD_DIR}
build.datestamp_builds = false
build.datestamp_builds_format = dd-MM-yy

build.enable_source_backup = true

# Builds can look for IP cores in a "core cache" before re-generating them
# To use, set this parameter to point to a directory containing your core cache.
build.arbitrated_core_cache=

#
# Reporting options
# 

#
# Execution options for external tools
#

coregen.command = coregen

xst.command = ulimit -s unlimited && xst
ngcbuild.command =  ngcbuild
ngdbuild.command =  ngdbuild
mapper.command =  map
par.command =  par
xdl.command =  xdl
trce.command =  trce
bitgen.command =  bitgen
# MaxFile runs bitgen and XDL
maxfile.command= ${MAXCOMPILERDIR}/bin/maxfilestitch

#
# Compiler options for simulation
#
simulation.compile.max_optimization_level = 2
simulation.compile.parallelism = 2

# Set whether builds should be aborted if they seem to be using
# too many resources before the map (MPPR) stage. This can be
# configured separately for BRAM, DSPs and FFs.
buildresource.abort_when_overmapped_bram = true
buildresource.abort_when_overmapped_dsps = true
buildresource.abort_when_overmapped_ffs = false
