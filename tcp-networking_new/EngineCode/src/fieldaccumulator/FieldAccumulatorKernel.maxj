package fieldaccumulator;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.networking.v1.framed_kernels.ByteOrder;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FrameFormat;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneRXType;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneTXType;

public class
FieldAccumulatorKernel extends FramedKernel
{
    static class
    DataIn extends FrameFormat
    {
	DataIn()
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("instrument_id", dfeInt(32));
	    addField("level", dfeInt(32));
	    addField("side", dfeInt(32));
	    addField("quantity", dfeInt(32));
	    addField("price", dfeInt(32));
	}
    }

    static class
    DataOut extends FrameFormat
    {
	DataOut()
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("spread_quantity", dfeInt(32));
	    addField("spread_delta", dfeInt(32));
	}
    }

    FieldAccumulatorKernel(KernelParameters parameters)
    {
	super(parameters);

	debug.simPrintf("In Kernel\n");

	/* Registers */
	DFEVar a_bidprice = dfeInt(32).newInstance(this);
	DFEVar a_bidquant = dfeInt(32).newInstance(this);
	DFEVar b_askprice = dfeInt(32).newInstance(this);
	DFEVar b_askquant = dfeInt(32).newInstance(this);
	DFEVar ab_askprice = dfeInt(32).newInstance(this);
	DFEVar ab_askquant = dfeInt(32).newInstance(this);


	/* Declare Frame In */
	FrameData<DataIn> frameIn = io.frameInput("frameIn", new DataIn(), new UDPOneToOneRXType());

	debug.simPrintf("ID %d\n", frameIn["instrument_id"]);
	debug.simPrintf("PRICE %d\n", frameIn["price"]);


	pushResetBetweenFrames(false);

	/* Conditionals for A */
	DFEVar a_bid   = frameIn["instrument_id"].eq(constant.var(dfeInt(32), 0)) &
	                 frameIn["level"].eq(constant.var(dfeInt(32), 0)) &
			         frameIn["side"].eq(constant.var(dfeInt(32), 0));

	a_bidprice = Reductions.streamHold(frameIn["price"], a_bid);
	a_bidquant = Reductions.streamHold(frameIn["quantity"], a_bid);
	//popResetBetweenFrames();


	 //  Conditionals for B

	DFEVar b_ask   = frameIn["instrument_id"].eq(constant.var(dfeInt(32), 1)) &
    frameIn["level"].eq(constant.var(dfeInt(32), 0)) &
    frameIn["side"].eq(constant.var(dfeInt(32), 0));

	b_askprice = Reductions.streamHold(frameIn["price"], b_ask);
	b_askquant = Reductions.streamHold(frameIn["quantity"], b_ask);
	//popResetBetweenFrames();

	// Conditionals for A-B

	DFEVar ab_ask   = frameIn["instrument_id"].eq(constant.var(dfeInt(32), 2)) &
    frameIn["level"].eq(constant.var(dfeInt(32), 0)) &
    frameIn["side"].eq(constant.var(dfeInt(32), 0));

	ab_askprice = Reductions.streamHold(frameIn["price"], ab_ask);
	ab_askquant = Reductions.streamHold(frameIn["quantity"], ab_ask);
	popResetBetweenFrames();

	//Implied Calculation
	DFEVar ab_implied = a_bidprice - b_askprice;
	DFEVar ab_impliedquant = (a_bidquant<b_askquant)?((a_bidquant<ab_askquant)?a_bidquant:ab_askquant):((b_askquant<ab_askquant)?b_askquant:ab_askquant);
	//d=(a<b)?((a<c)?a:c):((b<c)?b:c);
	/* Declare Frame Out */
	FrameData<DataOut> frameOut = new FrameData<DataOut>(this, new DataOut(), new UDPOneToOneTXType());

	frameOut["spread_delta"]    <== ab_askprice - ab_implied;
	frameOut["spread_quantity"] <== ab_impliedquant; // ab_askquant < impliedQuantity ? ab_askquant : impliedQuantity;

	frameOut.linkfield[UDPOneToOneTXType.SOCKET] <==
		frameIn.linkfield[UDPOneToOneRXType.SOCKET];

	io.frameOutput("frameOut", frameOut);
    }
}
