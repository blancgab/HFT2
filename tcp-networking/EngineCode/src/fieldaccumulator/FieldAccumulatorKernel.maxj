package fieldaccumulator;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.networking.v1.framed_kernels.ByteOrder;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FrameFormat;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneRXType;
import com.maxeler.networking.v1.kernel_types.UDPOneToOneTXType;

public class
FieldAccumulatorKernel extends FramedKernel
{
    static class
    DataIn extends FrameFormat
    {
	DataIn()
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("instrument_id", dfeInt(32));
	    addField("level", dfeInt(32));
	    addField("side", dfeInt(32));
	    addField("quantity", dfeInt(32));
	    addField("price", dfeInt(32));
	}
    }

    static class
    DataOut extends FrameFormat
    {
	DataOut()
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("spread_quantity", dfeInt(32));
	    addField("spread_delta", dfeInt(32));
	}
    }

    FieldAccumulatorKernel(KernelParameters parameters)
    {
	super(parameters);

	debug.simPrintf("In Kernel\n");

	/* Registers */
	DFEVar a_bidprice = dfeInt(32).newInstance(this);
	DFEVar a_bidquant = dfeInt(32).newInstance(this);

	/* Declare Frame In */
	FrameData<DataIn> frameIn = io.frameInput("frameIn", new DataIn(), new UDPOneToOneRXType());

	debug.simPrintf("ID %d\n", frameIn["instrument_id"]);
	debug.simPrintf("PRICE %d\n", frameIn["price"]);

	/* Conditionals */
	boolean a_bid   = (frameIn["instrument_id"] == constant.var(dfeUInt(8), 0) &
                       frameIn["level"]         == constant.var(dfeUInt(8), 0) &
			           frameIn["side"]          == constant.var(dfeUInt(8), 0));

	a_bidquant  = a_bid  ? frameIn["quantity"] : a_bidquant;
	a_bidprice  = a_bid  ? frameIn["price"]    : a_bidprice;

	/* Declare Frame Out */
	FrameData<DataOut> frameOut = new FrameData<DataOut>(this, new DataOut(), new UDPOneToOneTXType());

	frameOut["spread_delta"]    <== frameIn["price"]; // ab_askprice - impliedBidPrice;
	frameOut["spread_quantity"] <== frameIn["quantity"]; // ab_askquant < impliedQuantity ? ab_askquant : impliedQuantity;

	frameOut.linkfield[UDPOneToOneTXType.SOCKET] <==
		frameIn.linkfield[UDPOneToOneRXType.SOCKET];

	io.frameOutput("frameOut", frameOut);
    }
}
