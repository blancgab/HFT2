package fieldaccumulator;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.networking.v1.framed_kernels.ByteOrder;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FrameFormat;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;
import com.maxeler.networking.v1.kernel_types.TCPType;

public class 
FieldAccumulatorKernel extends FramedKernel 
{
    static class 
    DataIn extends FrameFormat 
    {
	DataIn() 
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("instrument_id", dfeUInt(8));
	    addField("level", dfeUInt(8));
	    addField("side", dfeUInt(8));
	    addField("quantity", dfeUInt(8));
	    addField("price", dfeInt(32));
	}
    }
    
    static class 
    DataOut extends FrameFormat 
    {
	DataOut() 
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("spread_quantity", dfeUInt(8));
	    addField("spread_delta", dfeInt(32));
	}
    }

    FieldAccumulatorKernel(KernelParameters parameters) 
    {
	super(parameters);
	
	/* Registers */
	DFEVar a_bidprice = dfeInt(32).newInstance(this);
	DFEVar a_bidquant = dfeUInt(8).newInstance(this);
	DFEVar b_askprice = dfeInt(32).newInstance(this);
	DFEVar b_askquant = dfeUInt(8).newInstance(this);
	DFEVar ab_askprice = dfeInt(32).newInstance(this);
	DFEVar ab_askquant = dfeUInt(8).newInstance(this);

	//DFEVector<DFEVar> pricingvector = new DFEVectorType<DFEVar>(dfeInt(32),3).newInstance(this);
	//DFEVector<DFEVar> quantvector = new DFEVectorType<DFEVar>(dfeUInt(8),3).newInstance(this);

	/* Declare Frame In */
	FrameData<DataIn> frameIn = io.frameInput("frameIn", new DataIn(), new TCPType());

	/* Variables */
	DFEVar id    = frameIn["instrument_id"];
	DFEVar level = frameIn["level"];
	DFEVar side  = frameIn["side"];

	/* Conditionals */
	DFEVar a_bid  = (id==0 & level==0 & side==0);
	DFEVar b_ask  = (id==1 & level==0 & side==1);
	DFEVar ab_ask = (id==2 & level==0 & side==1);

	a_bidquant  = a_bid  ? frameIn["quantity"] : a_bidquant;
	a_bidprice  = a_bid  ? frameIn["price"]    : a_bidprice;
	b_askquant  = b_ask  ? frameIn["quantity"] : b_askquant;
	b_askprice  = b_ask  ? frameIn["price"]    : b_askprice;
	ab_askquant = ab_ask ? frameIn["quantity"] : a_bidquant;
	ab_askprice = ab_ask ? frameIn["price"]    : a_bidprice;

	/* Declare Frame Out */
	FrameData<DataOut> frameOut = new FrameData<DataOut>(this, new DataOut(), new TCPType());

	DFEVar impliedQuantity = a_bidquant < b_askquant ? a_bidquant : b_askquant;
	DFEVar impliedBidPrice = a_bidprice - b_askprice;

	frameOut["spread_delta"]    <== ab_askprice - impliedBidPrice;
	frameOut["spread_quantity"] <== ab_askquant < impliedQuantity ? ab_askquant : impliedQuantity;

	frameOut.linkfield[TCPType.SOCKET] <== frameIn.linkfield[TCPType.SOCKET];
	
	io.frameOutput("frameOut", frameOut);
	// io.frameOutput("frameOut", frameOut, constant.var(true), constant.var(true));
    }
}
