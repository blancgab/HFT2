package fieldaccumulator;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.Params;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.networking.v1.framed_kernels.ByteOrder;
import com.maxeler.networking.v1.framed_kernels.FrameData;
import com.maxeler.networking.v1.framed_kernels.FrameFormat;
import com.maxeler.networking.v1.framed_kernels.FramedKernel;
import com.maxeler.networking.v1.kernel_types.TCPType;

public class 
FieldAccumulatorKernel extends FramedKernel 
{
    static class 
    DataIn extends FrameFormat 
    {
	DataIn() 
	{
	    super(ByteOrder.LITTLE_ENDIAN);

	    /* Quantities */
	    addField("aBidQuantity", dfeInt(32));
	    addField("bAskQuantity", dfeInt(32));
	    addField("abSpreadBAskQuantity", dfeInt(32));

	    /* Prices */
	    addField("aBidPrice", dfeInt(32));
	    addField("bAskPrice", dfeInt(32));
	    addField("abSpreadAskPrice", dfeInt(32));
	}
    }
    
    static class 
    DataOut extends FrameFormat 
    {
	DataOut() 
	{
	    super(ByteOrder.LITTLE_ENDIAN);
	    addField("impliedQuantity", dfeInt(32));
	    addField("impliedDelta", dfeInt(32));
	}
    }

    FieldAccumulatorKernel(KernelParameters parameters) 
    {
	super(parameters);
	
	/* Declare Frame In */
	FrameData<DataIn> frameIn = io.frameInput("frameIn", new DataIn(), new TCPType());

	/* Trying to determine if we can get the minimum of two variables */
	DFEVar impliedSpreadQuantity = frameIn["aBidQuantity"] > frameIn["bAskQuantity"] ?
	    frameIn["bAskQuantity"] : frameIn["aBidQuantity"];


	/* Declare Frame Out */
	FrameData<DataOut> frameOut = new FrameData<DataOut>(this, new DataOut(), new TCPType());
	io.frameOutput("frameOut", frameOut);	

	frameOut["impliedQuantity"] <== impliedSpreadQuantity;
	frameOut["impliedDelta"] <== constant.var(dfeInt(32), -1);
	frameOut.Linkfield[TCPType.Socket] <== frameIn.linkfield[TCPType.SOCKET];
    }
}
