#ifdef MAXCOMPILER_VERSION_INFO
#define MAXCOMPILER_VERSION_INFO_PRESENT 1
#define MAXFILE_MAXCOMPILER_VERSION_YEAR         2014
#define MAXFILE_MAXCOMPILER_VERSION_NUM          2
#define MAXFILE_MAXCOMPILER_VERSION_POINT        0
#define MAXFILE_MAXCOMPILER_VERSION_PATCH        ""
#define MAXFILE_MAXCOMPILER_VERSION_REV          44158
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_DATE "2015-01-23"
#define MAXFILE_MAXCOMPILER_VERSION_RELEASE_MODE true
#endif

#ifdef MAXFILE_BUILD_INFO
#define MAXFILE_BUILD_INFO_PRESENT 1
#define MAXFILE_BUILD_NAME "FieldAccumulatorTCP"
#define MAXFILE_BUILD_DIR  "/home/demo/Desktop/MaxCompiler-Builds/FieldAccumulatorTCP_VECTIS_DFE_SIM"
#define MAXFILE_BUILD_DATE  20150420
#define MAXFILE_BUILD_REV   1
#endif

#ifdef PARAM
#define PARAM_PRESENT 1
PARAM(USE_NETWORK_MANAGER, 1)
PARAM(APP_ID, 0)
PARAM(REV_ID, 0)
PARAM(CHAIN_LENGTH, 88)
PARAM(IS_SIMULATION, 1)
PARAM(MEC_SUPPORTED, 1)
PARAM(PCIE_SLAVE_STREAMING, 0)
PARAM(PCIE_ALIGNMENT, 16)
PARAM(NUM_IFPGA_LINKS, 0)
#endif

#ifdef STRING_PARAM
#define STRING_PARAM_PRESENT 1
STRING_PARAM(BOARD_MODEL, "MAX3424A")
#endif



#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "fieldAccumulatorKernel.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_tcp_up_mac_tx_tieoff.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_id_0.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_id_1.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_SlicerFramer_network_mgmt_stream_from_host_tx_framed.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_from_host_tx_demux.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_tcp_up_mac_rx_tieoff.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_conn_state_framer.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_prefix_1.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_tx_from_host_rem_conv.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_mgmt_1_tx_tieoff.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_tx_PacketMux.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_rx_fanout.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_rx_to_host_filter.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_arp_server.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_icmp_echo_server.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_ch2_sfp1_eth_rx_to_host_drop.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_prefix_0.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_mux.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_dualAspectPush_network_mgmt_stream_to_host_rx_framed.h"
#endif

#ifdef INCLUDE_GENERATED_CPP_HEADERS
#include "StateMachineManagerBlock_impl_network_mgmt_stream_to_host_rx_framed_FramedStreamAligner.h"
#endif



#ifdef ICMP_ECHO_SERVER
#define ICMP_ECHO_SERVER_PRESENT 1
ICMP_ECHO_SERVER(CH2_SFP1, 1)
#endif

#ifdef TCP_STREAM
#define TCP_STREAM_PRESENT 1
TCP_STREAM(tcp_ch2_sfp1, 0, CH2_SFP1)
#endif

#ifdef FRAMED_STREAM
#define FRAMED_STREAM_PRESENT 1
FRAMED_STREAM(network_mgmt_stream_from_host_tx_framed, FROM_HOST, 8, 8)
#endif

#ifdef FRAMED_STREAM
#define FRAMED_STREAM_PRESENT 1
FRAMED_STREAM(network_mgmt_stream_to_host_rx_framed, TO_HOST, 4096, 8)
#endif

#ifdef ETHERNET_MANAGEMENT_HOST_STREAM_V2
#define ETHERNET_MANAGEMENT_HOST_STREAM_V2_PRESENT 1
ETHERNET_MANAGEMENT_HOST_STREAM_V2(0, CH2_SFP1, 0, ch2_sfp1_eth_rx_to_host_filter.enable, ch2_sfp1_eth_rx_to_host_drop.badFramesCounter, ch2_sfp1_eth_rx_to_host_drop.badFramesCounter)
#endif

#ifdef ETHERNET_MANAGEMENT_HOST_STREAM_V2
#define ETHERNET_MANAGEMENT_HOST_STREAM_V2_PRESENT 1
ETHERNET_MANAGEMENT_HOST_STREAM_V2(1, CH2_SFP1, 1, , , )
#endif








#ifdef MANAGER_NODE
#define MANAGER_NODE_PRESENT 1
MANAGER_NODE(fieldAccumulatorKernel, Kernel)
MANAGER_NODE(node1_ln108_WrapperNode, EthernetSim)
MANAGER_NODE(ch2_sfp1_eth_rx_fanout, ManagerStateMachine_ch2_sfp1_eth_rx_fanout)
MANAGER_NODE(ch2_sfp1_eth_rx_to_host_filter, ManagerStateMachine_ch2_sfp1_eth_rx_to_host_filter)
MANAGER_NODE(ch2_sfp1_eth_rx_to_host_drop, ManagerStateMachine_ch2_sfp1_eth_rx_to_host_drop)
MANAGER_NODE(ch2_sfp1_eth_tx_from_host_rem_conv, ManagerStateMachine_ch2_sfp1_eth_tx_from_host_rem_conv)
MANAGER_NODE(ch2_sfp1_arp_server, ManagerStateMachine_ch2_sfp1_arp_server)
MANAGER_NODE(ch2_sfp1_icmp_echo_server, ManagerStateMachine_ch2_sfp1_icmp_echo_server)
MANAGER_NODE(ch2_sfp1_tcp, WrapperNodeTCPSim)
MANAGER_NODE(ch2_sfp1_tcp_up_mac_rx_tieoff, ManagerStateMachine_ch2_sfp1_tcp_up_mac_rx_tieoff)
MANAGER_NODE(ch2_sfp1_tcp_up_mac_tx_tieoff, ManagerStateMachine_ch2_sfp1_tcp_up_mac_tx_tieoff)
MANAGER_NODE(ch2_sfp1_conn_state_framer, ManagerStateMachine_ch2_sfp1_conn_state_framer)
MANAGER_NODE(ch2_sfp1_eth_tx_PacketMux, ManagerStateMachine_ch2_sfp1_eth_tx_PacketMux)
MANAGER_NODE(SlicerFramer_network_mgmt_stream_from_host_tx_framed, ManagerStateMachine_SlicerFramer_network_mgmt_stream_from_host_tx_framed)
MANAGER_NODE(network_mgmt_stream_from_host_tx_framed, PCIe_From_Host_fwd)
MANAGER_NODE(network_mgmt_stream_from_host_tx_demux, ManagerStateMachine_network_mgmt_stream_from_host_tx_demux)
MANAGER_NODE(mgmt_1_tx_tieoff, ManagerStateMachine_mgmt_1_tx_tieoff)
MANAGER_NODE(network_mgmt_stream_to_host_rx_id_0, ManagerStateMachine_network_mgmt_stream_to_host_rx_id_0)
MANAGER_NODE(network_mgmt_stream_to_host_rx_prefix_0, ManagerStateMachine_network_mgmt_stream_to_host_rx_prefix_0)
MANAGER_NODE(network_mgmt_stream_to_host_rx_id_1, ManagerStateMachine_network_mgmt_stream_to_host_rx_id_1)
MANAGER_NODE(network_mgmt_stream_to_host_rx_prefix_1, ManagerStateMachine_network_mgmt_stream_to_host_rx_prefix_1)
MANAGER_NODE(network_mgmt_stream_to_host_rx_mux, ManagerStateMachine_network_mgmt_stream_to_host_rx_mux)
MANAGER_NODE(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, ManagerStateMachine_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor)
MANAGER_NODE(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, ManagerStateMachine_network_mgmt_stream_to_host_rx_framed_FramedStreamAligner)
MANAGER_NODE(dualAspectPush_network_mgmt_stream_to_host_rx_framed, ManagerStateMachine_dualAspectPush_network_mgmt_stream_to_host_rx_framed)
MANAGER_NODE(network_mgmt_stream_to_host_rx_framed, PCIe_To_Host_fwd)
MANAGER_NODE(loop_0_sink, LoopSink)
MANAGER_NODE(loop_0_src, LoopSource)
MANAGER_NODE(loop_1_sink, LoopSink)
MANAGER_NODE(loop_1_src, LoopSource)
MANAGER_NODE(loop_2_sink, LoopSink)
MANAGER_NODE(loop_2_src, LoopSource)
MANAGER_NODE(loop_3_sink, LoopSink)
MANAGER_NODE(loop_3_src, LoopSource)
MANAGER_NODE(Stream_55, DualAspectMux)
MANAGER_NODE(Stream_113, Fifo)
MANAGER_NODE(Stream_117, Fifo)
MANAGER_NODE(Stream_45, Fifo)
MANAGER_NODE(Stream_60, Fifo)
MANAGER_NODE(Stream_22, Fifo)
MANAGER_NODE(Stream_63, Fifo)
MANAGER_NODE(Stream_48, Fifo)
MANAGER_NODE(Stream_103, Fifo)
MANAGER_NODE(Stream_51, Fifo)
MANAGER_NODE(Stream_53, Fifo)
MANAGER_NODE(Stream_78, Fifo)
MANAGER_NODE(Stream_79, Fifo)
MANAGER_NODE(Stream_90, Fifo)
#endif

#ifdef MANAGER_NODE_IO
#define MANAGER_NODE_IO_PRESENT 1
MANAGER_NODE_IO(fieldAccumulatorKernel, frameIn, IN, STREAM, 77, PULL)
MANAGER_NODE_IO(fieldAccumulatorKernel, frameOut, OUT, STREAM, 77, PUSH)
MANAGER_NODE_IO(node1_ln108_WrapperNode, tx0, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(node1_ln108_WrapperNode, rx0, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, input, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_0, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_1, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_2, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_fanout, output_3, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_filter, input, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_filter, output, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_drop, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_rx_to_host_drop, dst, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_from_host_rem_conv, src, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_from_host_rem_conv, dst, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_arp_server, fromNet, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_arp_server, toNet, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_icmp_echo_server, rx, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_icmp_echo_server, tx, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, net_mac_rx, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, up_mac_tx, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, tx, IN, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, net_mac_tx, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, up_mac_rx, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, conn_state_ev, OUT, CH2_SFP1_CLK156_0, 11, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp, rx, OUT, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp_up_mac_rx_tieoff, input_0, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_tcp_up_mac_tx_tieoff, output_0, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(ch2_sfp1_conn_state_framer, cs_event, IN, CH2_SFP1_CLK156_0, 11, PUSH)
MANAGER_NODE_IO(ch2_sfp1_conn_state_framer, output, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_0, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_1, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_2, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, input_3, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(ch2_sfp1_eth_tx_PacketMux, output, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(SlicerFramer_network_mgmt_stream_from_host_tx_framed, src, IN, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(SlicerFramer_network_mgmt_stream_from_host_tx_framed, dst, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_framed, network_mgmt_stream_from_host_tx_framed, OUT, STREAM, 128, PULL)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_demux, src, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_demux, dst_0, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_from_host_tx_demux, dst_1, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(mgmt_1_tx_tieoff, input_0, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_id_0, data, OUT, CH2_SFP1_CLK156_0, 64, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_0, meta, IN, CH2_SFP1_CLK156_0, 64, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_0, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_0, dst, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_id_1, data, OUT, CH2_SFP1_CLK156_0, 64, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_1, meta, IN, CH2_SFP1_CLK156_0, 64, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_1, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_prefix_1, dst, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_mux, input_0, IN, CH2_SFP1_CLK156_0, 70, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_mux, input_1, IN, CH2_SFP1_CLK156_0, 70, PULL)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_mux, output, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, dst, OUT, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, metadata, OUT, CH2_SFP1_CLK156_0, 96, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, metadata, IN, CH2_SFP1_CLK156_0, 96, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, src, IN, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, dst, OUT, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(dualAspectPush_network_mgmt_stream_to_host_rx_framed, src, IN, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(dualAspectPush_network_mgmt_stream_to_host_rx_framed, dst, OUT, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(network_mgmt_stream_to_host_rx_framed, network_mgmt_stream_to_host_rx_framed, IN, STREAM, 128, PUSH)
MANAGER_NODE_IO(loop_0_sink, loop_0_sink, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(loop_0_src, loop_0_src, IN, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(loop_1_sink, loop_1_sink, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(loop_1_src, loop_1_src, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(loop_2_sink, loop_2_sink, OUT, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(loop_2_src, loop_2_src, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(loop_3_sink, loop_3_sink, OUT, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(loop_3_src, loop_3_src, IN, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(Stream_55, input, IN, STREAM, 128, PULL)
MANAGER_NODE_IO(Stream_55, output, OUT, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_113, input, IN, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(Stream_113, output, OUT, STREAM, 77, PULL)
MANAGER_NODE_IO(Stream_117, input, IN, STREAM, 64, PUSH)
MANAGER_NODE_IO(Stream_117, output, OUT, CH2_SFP1_CLK156_0, 64, PUSH)
MANAGER_NODE_IO(Stream_45, input, IN, STREAM, 77, PUSH)
MANAGER_NODE_IO(Stream_45, output, OUT, CH2_SFP1_CLK156_0, 77, PUSH)
MANAGER_NODE_IO(Stream_60, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_60, output, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_22, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_22, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_63, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_63, output, OUT, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_48, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_48, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_103, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_103, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_51, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_51, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_53, input, IN, CH2_SFP1_CLK156_0, 69, PUSH)
MANAGER_NODE_IO(Stream_53, output, OUT, CH2_SFP1_CLK156_0, 69, PULL)
MANAGER_NODE_IO(Stream_78, input, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(Stream_78, output, OUT, CH2_SFP1_CLK156_0, 70, PULL)
MANAGER_NODE_IO(Stream_79, input, IN, CH2_SFP1_CLK156_0, 70, PUSH)
MANAGER_NODE_IO(Stream_79, output, OUT, CH2_SFP1_CLK156_0, 70, PULL)
MANAGER_NODE_IO(Stream_90, input, IN, CH2_SFP1_CLK156_0, 128, PUSH)
MANAGER_NODE_IO(Stream_90, output, OUT, STREAM, 128, PUSH)
#endif

#ifdef MANAGER_STREAM
#define MANAGER_STREAM_PRESENT 1
MANAGER_STREAM(fieldAccumulatorKernel, frameOut, Stream_45, input, 77)
MANAGER_STREAM(node1_ln108_WrapperNode, rx0, ch2_sfp1_eth_rx_fanout, input, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_0, ch2_sfp1_eth_rx_to_host_filter, input, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_1, ch2_sfp1_arp_server, fromNet, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_2, ch2_sfp1_icmp_echo_server, rx, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_fanout, output_3, loop_2_src, loop_2_src, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_to_host_filter, output, ch2_sfp1_eth_rx_to_host_drop, src, 70)
MANAGER_STREAM(ch2_sfp1_eth_rx_to_host_drop, dst, network_mgmt_stream_to_host_rx_prefix_0, src, 70)
MANAGER_STREAM(ch2_sfp1_eth_tx_from_host_rem_conv, dst, Stream_48, input, 69)
MANAGER_STREAM(ch2_sfp1_arp_server, toNet, loop_0_src, loop_0_src, 69)
MANAGER_STREAM(ch2_sfp1_icmp_echo_server, tx, loop_1_src, loop_1_src, 69)
MANAGER_STREAM(ch2_sfp1_tcp, up_mac_rx, ch2_sfp1_tcp_up_mac_rx_tieoff, input_0, 70)
MANAGER_STREAM(ch2_sfp1_tcp_up_mac_tx_tieoff, output_0, ch2_sfp1_tcp, up_mac_tx, 69)
MANAGER_STREAM(ch2_sfp1_tcp, conn_state_ev, ch2_sfp1_conn_state_framer, cs_event, 11)
MANAGER_STREAM(ch2_sfp1_conn_state_framer, output, network_mgmt_stream_to_host_rx_prefix_1, src, 70)
MANAGER_STREAM(ch2_sfp1_tcp, rx, loop_3_src, loop_3_src, 77)
MANAGER_STREAM(ch2_sfp1_tcp, net_mac_tx, Stream_51, input, 69)
MANAGER_STREAM(ch2_sfp1_eth_tx_PacketMux, output, Stream_53, input, 69)
MANAGER_STREAM(network_mgmt_stream_from_host_tx_framed, network_mgmt_stream_from_host_tx_framed, Stream_55, input, 128)
MANAGER_STREAM(SlicerFramer_network_mgmt_stream_from_host_tx_framed, dst, Stream_60, input, 69)
MANAGER_STREAM(network_mgmt_stream_from_host_tx_demux, dst_0, Stream_22, input, 69)
MANAGER_STREAM(network_mgmt_stream_from_host_tx_demux, dst_1, Stream_63, input, 69)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_id_0, data, network_mgmt_stream_to_host_rx_prefix_0, meta, 64)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_prefix_0, dst, Stream_78, input, 70)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_id_1, data, network_mgmt_stream_to_host_rx_prefix_1, meta, 64)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_prefix_1, dst, Stream_79, input, 70)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, dst, dualAspectPush_network_mgmt_stream_to_host_rx_framed, src, 64)
MANAGER_STREAM(dualAspectPush_network_mgmt_stream_to_host_rx_framed, dst, network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, src, 128)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, metadata, network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, metadata, 96)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, dst, Stream_90, input, 128)
MANAGER_STREAM(network_mgmt_stream_to_host_rx_mux, output, network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, src, 70)
MANAGER_STREAM(loop_0_sink, loop_0_sink, ch2_sfp1_eth_tx_PacketMux, input_1, 69)
MANAGER_STREAM(loop_1_sink, loop_1_sink, Stream_103, input, 69)
MANAGER_STREAM(loop_2_sink, loop_2_sink, ch2_sfp1_tcp, net_mac_rx, 70)
MANAGER_STREAM(loop_3_sink, loop_3_sink, Stream_113, input, 77)
MANAGER_STREAM(Stream_55, output, Stream_117, input, 64)
MANAGER_STREAM(Stream_113, output, fieldAccumulatorKernel, frameIn, 77)
MANAGER_STREAM(Stream_117, output, SlicerFramer_network_mgmt_stream_from_host_tx_framed, src, 64)
MANAGER_STREAM(Stream_45, output, ch2_sfp1_tcp, tx, 77)
MANAGER_STREAM(Stream_60, output, network_mgmt_stream_from_host_tx_demux, src, 69)
MANAGER_STREAM(Stream_22, output, ch2_sfp1_eth_tx_from_host_rem_conv, src, 69)
MANAGER_STREAM(Stream_63, output, mgmt_1_tx_tieoff, input_0, 69)
MANAGER_STREAM(Stream_48, output, ch2_sfp1_eth_tx_PacketMux, input_0, 69)
MANAGER_STREAM(Stream_103, output, ch2_sfp1_eth_tx_PacketMux, input_2, 69)
MANAGER_STREAM(Stream_51, output, ch2_sfp1_eth_tx_PacketMux, input_3, 69)
MANAGER_STREAM(Stream_53, output, node1_ln108_WrapperNode, tx0, 69)
MANAGER_STREAM(Stream_78, output, network_mgmt_stream_to_host_rx_mux, input_0, 70)
MANAGER_STREAM(Stream_79, output, network_mgmt_stream_to_host_rx_mux, input_1, 70)
MANAGER_STREAM(Stream_90, output, network_mgmt_stream_to_host_rx_framed, network_mgmt_stream_to_host_rx_framed, 128)
#endif

#ifdef MANAGER_NODE_STACK_TRACE
#define MANAGER_NODE_STACK_TRACE_PRESENT 1
MANAGER_NODE_STACK_TRACE(fieldAccumulatorKernel, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(node1_ln108_WrapperNode, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_rx_fanout, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_rx_to_host_filter, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_rx_to_host_drop, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_tx_from_host_rem_conv, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_arp_server, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_icmp_echo_server, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_tcp, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_tcp_up_mac_rx_tieoff, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_tcp_up_mac_tx_tieoff, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_conn_state_framer, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(ch2_sfp1_eth_tx_PacketMux, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(SlicerFramer_network_mgmt_stream_from_host_tx_framed, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_from_host_tx_framed, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_from_host_tx_demux, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(mgmt_1_tx_tieoff, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_id_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_prefix_0, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_id_1, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_prefix_1, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_mux, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(dualAspectPush_network_mgmt_stream_to_host_rx_framed, "com.maxeler.maxcompiler.v2.managers.custom.CustomManager.addStateMachine(CustomManager.java:1150)\ncom.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(network_mgmt_stream_to_host_rx_framed, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_0_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_0_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_1_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_1_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_2_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_2_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_3_sink, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(loop_3_src, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_55, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_113, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_117, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_45, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_60, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_22, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_63, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_48, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_103, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_51, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_53, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_78, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_79, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
MANAGER_NODE_STACK_TRACE(Stream_90, "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
#endif


#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(fieldAccumulatorKernel, control_pipelining_depth, 2)
#endif


#ifdef KERNEL_CORE
#define KERNEL_CORE_PRESENT 1
KERNEL_CORE(fieldAccumulatorKernel)
#endif

#ifdef DEBUG_INPUT_BITS
#define DEBUG_INPUT_BITS_PRESENT 1
DEBUG_INPUT_BITS(fieldAccumulatorKernel, frameIn, 0)
#endif

#ifdef DEBUG_OUTPUT_BITS
#define DEBUG_OUTPUT_BITS_PRESENT 1
DEBUG_OUTPUT_BITS(fieldAccumulatorKernel, frameOut, 0)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_0_src, loop_sink, loop_0_sink)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_1_src, loop_sink, loop_1_sink)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_2_src, loop_sink, loop_2_sink)
#endif

#ifdef MANAGER_NODE_PROPERTY
#define MANAGER_NODE_PROPERTY_PRESENT 1
MANAGER_NODE_PROPERTY(loop_3_src, loop_sink, loop_3_sink)
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_CTOR
#define MANAGER_NODE_CPP_SIM_MODEL_CTOR_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_tcp_up_mac_tx_tieoff, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_tcp_up_mac_tx_tieoff, "ch2_sfp1_tcp_up_mac_tx_tieoff")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_from_host_tx_framed, PCIePullSourceSyncMax3, "network_mgmt_stream_from_host_tx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_id_0, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_id_0, "network_mgmt_stream_to_host_rx_id_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_id_1, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_id_1, "network_mgmt_stream_to_host_rx_id_1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_0_sink, LoopPullSinkSync, "loop_0_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_1_sink, LoopPushSinkSync, "loop_1_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_2_sink, LoopPushSinkSync, "loop_2_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_3_sink, LoopPushSinkSync, "loop_3_sink")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_55, DualAspectMuxSync, "Stream_55", 64, 2)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_103, FifoPushToPullSync, "Stream_103", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_113, FifoPushToPullSync, "Stream_113", false, 512, 77)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_117, FifoPushToPushSync, "Stream_117", false, 512, 64)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(fieldAccumulatorKernel, fieldAccumulatorKernel, "fieldAccumulatorKernel")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(SlicerFramer_network_mgmt_stream_from_host_tx_framed, maxcompilersim::state_machine::ManagerBlockSM_SlicerFramer_network_mgmt_stream_from_host_tx_framed, "SlicerFramer_network_mgmt_stream_from_host_tx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_45, FifoPushToPushSync, "Stream_45", false, 512, 77)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_60, FifoPushToPushSync, "Stream_60", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_tcp, TCPSync, "ch2_sfp1_tcp", TCPSync::RX_MODE_FRAMED, 1, 6, 24)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_from_host_tx_demux, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_from_host_tx_demux, "network_mgmt_stream_from_host_tx_demux")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_51, FifoPushToPullSync, "Stream_51", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_tcp_up_mac_rx_tieoff, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_tcp_up_mac_rx_tieoff, "ch2_sfp1_tcp_up_mac_rx_tieoff")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_conn_state_framer, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_conn_state_framer, "ch2_sfp1_conn_state_framer")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_3_src, LoopPushSourceSync, "loop_3_src", *MANAGER_BLOCK_FIELD(Stream_113), "input")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_22, FifoPushToPullSync, "Stream_22", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_63, FifoPushToPushSync, "Stream_63", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_prefix_1, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_prefix_1, "network_mgmt_stream_to_host_rx_prefix_1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_tx_from_host_rem_conv, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_tx_from_host_rem_conv, "ch2_sfp1_eth_tx_from_host_rem_conv")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(mgmt_1_tx_tieoff, maxcompilersim::state_machine::ManagerBlockSM_mgmt_1_tx_tieoff, "mgmt_1_tx_tieoff")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_79, FifoPushToPullSync, "Stream_79", false, 512, 70)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_48, FifoPushToPullSync, "Stream_48", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_tx_PacketMux, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_tx_PacketMux, "ch2_sfp1_eth_tx_PacketMux")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_53, FifoPushToPullSync, "Stream_53", false, 512, 69)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(node1_ln108_WrapperNode, Ethernet, "node1_ln108_WrapperNode", simulated_system_name, "CH2_SFP1", 1, "port0", 1, 1)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_rx_fanout, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_rx_fanout, "ch2_sfp1_eth_rx_fanout")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_rx_to_host_filter, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_rx_to_host_filter, "ch2_sfp1_eth_rx_to_host_filter")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_arp_server, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_arp_server, "ch2_sfp1_arp_server")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_icmp_echo_server, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_icmp_echo_server, "ch2_sfp1_icmp_echo_server")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_2_src, LoopPushSourceSync, "loop_2_src", *MANAGER_BLOCK_FIELD(ch2_sfp1_tcp), "net_mac_rx")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ch2_sfp1_eth_rx_to_host_drop, maxcompilersim::state_machine::ManagerBlockSM_ch2_sfp1_eth_rx_to_host_drop, "ch2_sfp1_eth_rx_to_host_drop")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_0_src, LoopPullSourceSync, "loop_0_src", *MANAGER_BLOCK_FIELD(ch2_sfp1_eth_tx_PacketMux), "input_1")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(loop_1_src, LoopPushSourceSync, "loop_1_src", *MANAGER_BLOCK_FIELD(Stream_103), "input")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_prefix_0, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_prefix_0, "network_mgmt_stream_to_host_rx_prefix_0")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_78, FifoPushToPullSync, "Stream_78", false, 512, 70)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_mux, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_mux, "network_mgmt_stream_to_host_rx_mux")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor, "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(dualAspectPush_network_mgmt_stream_to_host_rx_framed, maxcompilersim::state_machine::ManagerBlockSM_dualAspectPush_network_mgmt_stream_to_host_rx_framed, "dualAspectPush_network_mgmt_stream_to_host_rx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, maxcompilersim::state_machine::ManagerBlockSM_network_mgmt_stream_to_host_rx_framed_FramedStreamAligner, "network_mgmt_stream_to_host_rx_framed_FramedStreamAligner")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(Stream_90, FifoPushToPushSync, "Stream_90", false, 512, 128)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(network_mgmt_stream_to_host_rx_framed, PCIePushSinkSyncMax3, "network_mgmt_stream_to_host_rx_framed")
MANAGER_NODE_CPP_SIM_MODEL_CTOR(CapabilityReg, CapRegs, "CapabilityReg", 0, 1, 1, 0, 0, 0, 0, 0, 88)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ifpga, IFPGARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(sfa, SFARegs)
MANAGER_NODE_CPP_SIM_MODEL_CTOR(ChecksumMemory, ChecksumMem, "ChecksumMemory", "98e41f18e5acf05023b29dc04649c9b86002d42cb120f383b316f13e52959a10")
#endif

#ifdef MANAGER_NODE_CPP_SIM_MODEL_SETUP
#define MANAGER_NODE_CPP_SIM_MODEL_SETUP_PRESENT 1
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_ctld_almost_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_ctld_done, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_ctld_empty, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_ctld_read, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_ctld_read_pipe_dbg, 3, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_ctld_request, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_done_out, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_fill_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_flush_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_flush_start, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_flush_start_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_flushing, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_full_level, 7, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_out_stall, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_out_valid, 1, 0)
MANAGER_NODE_CPP_SIM_MODEL_SETUP(fieldAccumulatorKernel, addDebugRegister, reg_dbg_stall_vector, 1, 0)
#endif

#ifdef PCIE_STREAM
#define PCIE_STREAM_PRESENT 1
PCIE_STREAM(network_mgmt_stream_from_host_tx_framed, STREAM_FROM_HOST, 0)
PCIE_STREAM(network_mgmt_stream_to_host_rx_framed, STREAM_TO_HOST, 0)
#endif

#ifdef TOE
#define TOE_PRESENT 1
TOE(ch2_sfp1_tcp, CH2_SFP1, toe_host_if, 64, 64)
#endif

#ifdef NETWORK
#define NETWORK_PRESENT 1
NETWORK(CH2_SFP1, V6TenGigEthernetPlugin, CH2_SFP1_MAC)
#endif

#ifdef REG
#define REG_PRESENT 1
REG(fieldAccumulatorKernel.io_frameIn_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(fieldAccumulatorKernel.io_frameOut_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(fieldAccumulatorKernel.current_run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(fieldAccumulatorKernel.dbg_ctld_almost_empty, 0x8, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_ctld_done, 0x9, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_ctld_empty, 0xa, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_ctld_read, 0xb, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_ctld_read_pipe_dbg, 0xc, 1, hwBits(3))
REG(fieldAccumulatorKernel.dbg_ctld_request, 0xd, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_done_out, 0xe, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_fill_level, 0xf, 1, hwBits(7))
REG(fieldAccumulatorKernel.dbg_flush_level, 0x10, 1, hwBits(7))
REG(fieldAccumulatorKernel.dbg_flush_start, 0x11, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_flush_start_level, 0x12, 1, hwBits(7))
REG(fieldAccumulatorKernel.dbg_flushing, 0x13, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_full_level, 0x14, 1, hwBits(7))
REG(fieldAccumulatorKernel.dbg_out_stall, 0x15, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_out_valid, 0x16, 1, hwBits(1))
REG(fieldAccumulatorKernel.dbg_stall_vector, 0x17, 1, hwBits(1))
REG(SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount, 0x18, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount, 0x20, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ch2_sfp1_eth_tx_from_host_rem_conv.badFramesCounter, 0x28, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ch2_sfp1_eth_rx_to_host_filter.enable, 0x30, 1, hwOffsetFix(1, 0, UNSIGNED))
REG(ch2_sfp1_arp_server.ip_address, 0x31, 4, hwOffsetFix(32, 0, UNSIGNED))
REG(ch2_sfp1_arp_server.mac_address, 0x35, 6, hwOffsetFix(48, 0, UNSIGNED))
REG(ch2_sfp1_eth_rx_to_host_drop.badFramesCounter, 0x3b, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount, 0x43, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount, 0x4b, 8, hwOffsetFix(64, 0, UNSIGNED))
REG(ifpga.ifpga_ctrl, 0x53, 1, hwBits(8))
REG(SignalForwardingAdapter.SFA_FORWARD_EN, 0x54, 4, hwBits(32))
#endif

#ifdef REG_V2
#define REG_V2_PRESENT 1
REG_V2(fieldAccumulatorKernel.io_frameIn_force_disabled, 0x0, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(fieldAccumulatorKernel.io_frameOut_force_disabled, 0x1, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, true)
REG_V2(fieldAccumulatorKernel.current_run_cycle_count, 0x2, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_ctld_almost_empty, 0x8, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_ctld_done, 0x9, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_ctld_empty, 0xa, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_ctld_read, 0xb, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_ctld_read_pipe_dbg, 0xc, 1, hwBits(3), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_ctld_request, 0xd, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_done_out, 0xe, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_fill_level, 0xf, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_flush_level, 0x10, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_flush_start, 0x11, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_flush_start_level, 0x12, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_flushing, 0x13, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_full_level, 0x14, 1, hwBits(7), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_out_stall, 0x15, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_out_valid, 0x16, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(fieldAccumulatorKernel.dbg_stall_vector, 0x17, 1, hwBits(1), HOST_READ_ONLY, false)
REG_V2(SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount, 0x18, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount, 0x20, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ch2_sfp1_eth_tx_from_host_rem_conv.badFramesCounter, 0x28, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ch2_sfp1_eth_rx_to_host_filter.enable, 0x30, 1, hwOffsetFix(1, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_arp_server.ip_address, 0x31, 4, hwOffsetFix(32, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_arp_server.mac_address, 0x35, 6, hwOffsetFix(48, 0, UNSIGNED), HOST_WRITE_ONLY, false)
REG_V2(ch2_sfp1_eth_rx_to_host_drop.badFramesCounter, 0x3b, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount, 0x43, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount, 0x4b, 8, hwOffsetFix(64, 0, UNSIGNED), HOST_READ_ONLY, false)
REG_V2(ifpga.ifpga_ctrl, 0x53, 1, hwBits(8), HOST_READ_WRITE, false)
REG_V2(SignalForwardingAdapter.SFA_FORWARD_EN, 0x54, 4, hwBits(32), HOST_READ_WRITE, false)
#endif


#ifdef MEM2
#define MEM2_PRESENT 1
MEM2(ch2_sfp1_tcp.toe_host_if, 0x400000, hwBits(36))
MEM2(node1_ln108_WrapperNode.CH2_SFP1_MAC, 0x410000, hwBits(32))
MEM2(ch2_sfp1_icmp_echo_server.params, 0x420000, hwOffsetFix(48, 0, UNSIGNED))
#endif

#ifdef MEM_DEPTH
#define MEM_DEPTH_PRESENT 1
MEM_DEPTH(ch2_sfp1_tcp.toe_host_if, 16384)
MEM_DEPTH(node1_ln108_WrapperNode.CH2_SFP1_MAC, 8192)
MEM_DEPTH(ch2_sfp1_icmp_echo_server.params, 2)
#endif

#ifdef CHECKSUM
#define CHECKSUM_PRESENT 1
CHECKSUM("98e41f18e5acf05023b29dc04649c9b86002d42cb120f383b316f13e52959a10")
#endif

#ifdef CAPABILITY
#define CAPABILITY_PRESENT 1
CAPABILITY(MAX3REV, MAX3REVA)
CAPABILITY(MAX3RAM, DDR3_24GB)
CAPABILITY(MAX3FPGA, SXT475_2ES)
#endif

#ifdef DEFINE_DESIGN_NAME
#define DESIGN_NAME FieldAccumulatorTCP
#endif /* DEFINE_DESIGN_NAME */

#ifndef SLIC_NO_DECLARATIONS
/**\file */
#ifndef SLIC_DECLARATIONS_FieldAccumulatorTCP_H
#define SLIC_DECLARATIONS_FieldAccumulatorTCP_H
#include "MaxSLiCInterface.h"
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#define FieldAccumulatorTCP_PCIE_ALIGNMENT (16)
#define FieldAccumulatorTCP_USE_NETWORK_MANAGER (1)


/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/




/**
 * \brief Basic static function for the interface 'default'.
 * 
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount".
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount".
 * \param [in] instream_network_mgmt_stream_from_host_tx_framed Stream "network_mgmt_stream_from_host_tx_framed".
 * \param [in] instream_size_network_mgmt_stream_from_host_tx_framed The size of the stream instream_network_mgmt_stream_from_host_tx_framed in bytes.
 * \param [out] outstream_network_mgmt_stream_to_host_rx_framed Stream "network_mgmt_stream_to_host_rx_framed".
 * \param [in] outstream_size_network_mgmt_stream_to_host_rx_framed The size of the stream outstream_network_mgmt_stream_to_host_rx_framed in bytes.
 */
void FieldAccumulatorTCP(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed);

/**
 * \brief Basic static non-blocking function for the interface 'default'.
 * 
 * Schedule to run on an engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 * 
 * 
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount".
 * \param [out] outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount".
 * \param [out] outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount".
 * \param [in] instream_network_mgmt_stream_from_host_tx_framed Stream "network_mgmt_stream_from_host_tx_framed".
 * \param [in] instream_size_network_mgmt_stream_from_host_tx_framed The size of the stream instream_network_mgmt_stream_from_host_tx_framed in bytes.
 * \param [out] outstream_network_mgmt_stream_to_host_rx_framed Stream "network_mgmt_stream_to_host_rx_framed".
 * \param [in] outstream_size_network_mgmt_stream_to_host_rx_framed The size of the stream outstream_network_mgmt_stream_to_host_rx_framed in bytes.
 * \return A handle on the execution status, or NULL in case of error.
 */
max_run_t *FieldAccumulatorTCP_nonblock(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed);

/**
 * \brief Advanced static interface, structure for the engine interface 'default'
 * 
 */
typedef struct { 
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount; /**<  [out] Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount". */
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount; /**<  [out] Output scalar parameter "SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount". */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount; /**<  [out] Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount". */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount; /**<  [out] Output scalar parameter "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount". */
	const void *instream_network_mgmt_stream_from_host_tx_framed; /**<  [in] Stream "network_mgmt_stream_from_host_tx_framed". */
	size_t instream_size_network_mgmt_stream_from_host_tx_framed; /**<  [in] The size of the stream instream_network_mgmt_stream_from_host_tx_framed in bytes. */
	void *outstream_network_mgmt_stream_to_host_rx_framed; /**<  [out] Stream "network_mgmt_stream_to_host_rx_framed". */
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed; /**<  [in] The size of the stream outstream_network_mgmt_stream_to_host_rx_framed in bytes. */
} FieldAccumulatorTCP_actions_t;

/**
 * \brief Advanced static function for the interface 'default'.
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in,out] interface_actions Actions to be executed.
 */
void FieldAccumulatorTCP_run(
	max_engine_t *engine,
	FieldAccumulatorTCP_actions_t *interface_actions);

/**
 * \brief Advanced static non-blocking function for the interface 'default'.
 *
 * Schedule the actions to run on the engine and return immediately.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * 
 * \param [in] engine The engine on which the actions will be executed.
 * \param [in] interface_actions Actions to be executed.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldAccumulatorTCP_run_nonblock(
	max_engine_t *engine,
	FieldAccumulatorTCP_actions_t *interface_actions);

/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void FieldAccumulatorTCP_run_group(max_group_t *group, FieldAccumulatorTCP_actions_t *interface_actions);

/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldAccumulatorTCP_run_group_nonblock(max_group_t *group, FieldAccumulatorTCP_actions_t *interface_actions);

/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void FieldAccumulatorTCP_run_array(max_engarray_t *engarray, FieldAccumulatorTCP_actions_t *interface_actions[]);

/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldAccumulatorTCP_run_array_nonblock(max_engarray_t *engarray, FieldAccumulatorTCP_actions_t *interface_actions[]);

/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* FieldAccumulatorTCP_convert(max_file_t *maxfile, FieldAccumulatorTCP_actions_t *interface_actions);

/**
 * \brief Initialise a maxfile.
 */
max_file_t* FieldAccumulatorTCP_init(void);

/* Error handling functions */
int FieldAccumulatorTCP_has_errors(void);
const char* FieldAccumulatorTCP_get_errors(void);
void FieldAccumulatorTCP_clear_errors(void);
/* Free statically allocated maxfile data */
void FieldAccumulatorTCP_free(void);
/* returns: -1 = error running command; 0 = no error reported */
int FieldAccumulatorTCP_simulator_start(void);
/* returns: -1 = error running command; 0 = no error reported */
int FieldAccumulatorTCP_simulator_stop(void);

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* SLIC_DECLARATIONS_FieldAccumulatorTCP_H */

#endif /* SLIC_NO_DECLARATIONS */

#ifdef PHOTON_NODE_DATA
#define PHOTON_NODE_DATA_PRESENT 1
PHOTON_NODE_DATA(fieldAccumulatorKernel, 148, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:125)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 4, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:50)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:125)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 5, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:49)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:125)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 6, NodeInputMappedReg, "Scalar input (io_frameIn_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 7, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 8, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 9, NodeInput, "Input(frameIn)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 15, NodeSlice, "[75:75]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 16, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 19, NodeDisableInput, "disableInput('frameIn')", "com.maxeler.maxcompiler.v2.kernelcompiler.Flush.disableInput(Flush.java:207)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:148)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 180, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:37)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 58, NodeConstantRawBits, "{HWOffsetFix:9, 0, UNSIGNED}\n0x100; 256.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:37)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 59, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.simpleCounter(Count.java:529)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:37)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 179, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 178, NodeConstantRawBits, "{HWOffsetFix:2, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 29, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.makeCounter(Count.java:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:361)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 30, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1052)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:367)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 10, NodeSlice, "[63:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 25, NodeSlice, "[7:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busSlice(FrameData.maxj:580)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:606)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 31, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:641)\ncom.maxeler.networking.v1.framed_kernels.FrameData.holdFirstValue(FrameData.maxj:370)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:619)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 32, NodeReinterpret, "<{HWOffsetFix:8, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:156)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeStaticFieldStream(FrameData.maxj:626)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:655)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 177, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x01; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:38)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 61, NodeSub, "-", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.sub(DFEVar.java:929)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:38)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 150, NodeShift, ">> 1", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:245)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:38)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 64, NodeReinterpret, "<{HWOffsetFix:8, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:245)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:38)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 65, NodeGt, ">", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.gt(DFEVar.java:776)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:38)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 88, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:50)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:287)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 89, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:49)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:287)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 149, NodeConstantRawBits, "{HWOffsetFix:32, 0, UNSIGNED}\n0x00000040; 64.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:883)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:627)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 90, NodeStateMachine, "State Machine (outputSM_frameOut)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:600)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 123, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 124, NodeInputMappedReg, "Scalar input (io_frameOut_force_disabled)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 125, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 126, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 170, NodeFIFO, "FIFO(12)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 118, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.pack(DFEVar.java:1320)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:304)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 119, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:62)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:304)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 135, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 169, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 116, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.pack(DFEVar.java:1320)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:301)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 117, NodeReinterpret, "<{HWOffsetFix:1, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:62)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:301)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 133, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 168, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 121, NodeReinterpret, "<{HWRawBits:3}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.pack(DFEVar.java:1320)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:309)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 122, NodeReinterpret, "<{HWOffsetFix:3, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.KernelType.unpack(KernelType.java:62)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.forceConnect(FrameIO.java:223)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:309)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 131, NodeReinterpret, "<{HWRawBits:3}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 167, NodeFIFO, "FIFO(13)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 11, NodeSlice, "[71:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 12, NodeReinterpret, "<{HWOffsetFix:8, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.input(IO.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:145)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 129, NodeReinterpret, "<{HWRawBits:8}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 166, NodeFIFO, "FIFO(17)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 165, NodeFIFO, "FIFO(12)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 164, NodeFIFO, "FIFO(11)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 111, NodeStreamOffset, "stream offset: -1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:692)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 97, NodeCast, "{HWOffsetFix:1, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 153, NodeFIFO, "FIFO(11)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 151, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 99, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 100, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 101, NodeReinterpret, "<{HWOffsetFix:64, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 102, NodeCast, "{HWOffsetFix:1, 0, TWOSCOMPLEMENT}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 155, NodeFIFO, "FIFO(11)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 152, NodeReinterpret, "<{HWRawBits:1}>", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 104, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 105, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 106, NodeReinterpret, "<{HWOffsetFix:64, 0, TWOSCOMPLEMENT}>", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.padSignExtend(Bitops.java:195)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:676)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 107, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cat(DFEVar.java:188)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:675)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 108, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:681)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 94, NodeConstantRawBits, "{HWRawBits:64}\n0x0000000000000000", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.zero(Constant.java:484)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:670)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 34, NodeSlice, "[7:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busSlice(FrameData.maxj:580)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 35, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:388)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 33, NodeSlice, "[63:8]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busSlice(FrameData.maxj:580)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:387)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 157, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 36, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cat(DFEVar.java:188)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busAppend(FrameData.maxj:566)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:390)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 40, NodeStreamOffset, "stream offset: -96", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:314)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:456)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 38, NodeStateMachine, "State Machine (frameIn_dmoc_items)", "com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib.addStateMachine(KernelLib.java:493)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:446)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 39, NodeNeg, "(-)", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.neg(DFEVar.java:1062)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:454)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 41, NodeStreamOffset, "stream offset: -96", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:314)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:456)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 42, NodeDynamicStreamOffset, "dynamic offset: [-96, 0]", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:314)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:456)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 43, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.offset(Stream.java:245)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:468)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 158, NodeFIFO, "FIFO(1)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 44, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cat(DFEVar.java:188)\ncom.maxeler.networking.v1.framed_kernels.FrameData.busAppend(FrameData.maxj:566)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:467)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 159, NodeFIFO, "FIFO(5)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 45, NodeShift, ">>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.shiftRight(DFEVar.java:226)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:476)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 46, NodeSlice, "[7:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:489)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 47, NodeReinterpret, "<{HWOffsetFix:8, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:156)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:499)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 66, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:40)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 48, NodeSlice, "[15:8]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:489)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 49, NodeReinterpret, "<{HWOffsetFix:8, 0, UNSIGNED}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:156)\ncom.maxeler.networking.v1.framed_kernels.FrameData.makeVariableFieldStream(FrameData.maxj:499)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:649)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:155)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 67, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:40)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 68, NodeAdd, "+", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.add(DFEVar.java:868)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:40)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 176, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.makeAccumulator(Accumulator.java:111)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:45)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 69, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1052)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:43)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 160, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 71, NodeAccumulator, "MaxDCAccumulator_hwOffsetFix(32, 0, UNSIGNED)_MONADIC", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.makeAccumulator(Accumulator.java:111)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:45)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 80, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:216)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.addStaticField(SourcelessOutputManager.maxj:552)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:205)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:155)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:56)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 161, NodeFIFO, "FIFO(9)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 74, NodeCast, "{HWOffsetFix:32, 0, UNSIGNED}", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cast(DFEVar.java:165)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:52)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 175, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x0; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.makeAccumulator(Accumulator.java:111)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:51)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 174, NodeConstantRawBits, "{HWOffsetFix:8, 0, UNSIGNED}\n0x00; 0.0", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:589)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:48)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 73, NodeEq, "==", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.eq(DFEVar.java:589)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:48)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 162, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 76, NodeAccumulator, "MaxDCAccumulator_hwOffsetFix(32, 0, UNSIGNED)_MONADIC", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Accumulator.makeAccumulator(Accumulator.java:111)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:51)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 77, NodeReinterpret, "<{HWRawBits:32}>", "com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorBase.pack(DFEVectorBase.java:216)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.addStaticField(SourcelessOutputManager.maxj:552)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:205)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:155)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:56)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 85, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.concat(Bitops.java:158)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.commitStaticFragmentsToBus(SourcelessOutputManager.maxj:412)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.addStaticField(SourcelessOutputManager.maxj:570)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:205)\ncom.maxeler.networking.v1.framed_kernels.FrameData.<init>(FrameData.maxj:155)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:56)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 95, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.cat(DFEVar.java:188)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:670)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 163, NodeFIFO, "FIFO(7)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 96, NodeShift, "<<", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops.circularLeftShift(Bitops.java:306)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:672)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 109, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:410)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:681)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 110, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:686)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 113, NodeSlice, "[63:0]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:696)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 112, NodeSlice, "[127:64]", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.slice(DFEVar.java:322)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:695)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 114, NodeMux, "MUX", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.ternaryIf(DFEVar.java:1152)\ncom.maxeler.networking.v1.framed_kernels.SourcelessOutputManager.makeBusOutput(SourcelessOutputManager.maxj:694)\ncom.maxeler.networking.v1.framed_kernels.FrameData.getBusOutput(FrameData.maxj:221)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:294)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 130, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 132, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 134, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 136, NodeCat, "@", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 127, NodeOutput, "Output(frameOut)", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.output(IO.java:723)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:315)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 142, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 173, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 139, NodeConstantRawBits, "{HWOffsetFix:49, 0, UNSIGNED}\n0x1000000000000; 2.81474976710656E14", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 140, NodeCounterV1, "Counter(NUMERIC_INCREMENTING)\nInc: 1\nReset: 0\nInit: 0", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 141, NodeStreamOffset, "stream offset: 1", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 143, NodeOutputMappedReg, "Scalar output (current_run_cycle_count)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 20, NodeNot, "~", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.complement(DFEVar.java:1052)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 171, NodeFIFO, "FIFO(4)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 21, NodeOr, "|", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.or(DFEVar.java:410)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 22, NodeConstantRawBits, "{HWOffsetFix:1, 0, UNSIGNED}\n0x1; 1.0", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Constant.var(Constant.java:80)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:50)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 23, NodeHold, "Hold", "com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions.streamHold(Reductions.java:715)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.oneShotTrigger(FrameIO.java:49)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:149)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameInput(FrameIO.java:78)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:33)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 172, NodeFIFO, "FIFO(2)", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 137, NodeAnd, "&", "com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar.and(DFEVar.java:522)\ncom.maxeler.networking.v1.framed_kernels.FrameIO.frameOutput(FrameIO.java:320)\nfieldaccumulator.FieldAccumulatorKernel.<init>(FieldAccumulatorKernel.maxj:63)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:14)\n")
PHOTON_NODE_DATA(fieldAccumulatorKernel, 147, NodeFlush, "flush after trigger", "com.maxeler.maxcompiler.v2.managers.DFEManager.build(DFEManager.java:361)\nfieldaccumulator.FieldAccumulatorManager.main(FieldAccumulatorManager.maxj:19)\n")
#endif

#ifdef SLIC_USE_DEFINITIONS
#include <stdio.h>
#include <math.h>
#include <pthread.h>
#include <string.h>
#include <unistd.h>
#include <stdlib.h>
static max_file_t *stored_maxfile = NULL;
static max_engine_t *stored_engine = NULL;
static char *stored_error = NULL;
static int stored_has_error = 0;
static pthread_once_t slic_bs_is_initialised = PTHREAD_ONCE_INIT;

static void set_error(const char *error_str)
{
	stored_has_error = 1; 
	if(stored_error == NULL) {
		stored_error = strdup(error_str);
	} else {
		char *nerr = malloc(strlen(stored_error) + strlen(error_str) + 2);
		sprintf(nerr, "%s\n%s", stored_error, error_str);
		free(stored_error);
		stored_error = nerr;
	}
}
static void set_error_and_free(char *error_str){
	set_error(error_str);
	free(error_str);
}
int FieldAccumulatorTCP_has_errors(void)
{	return stored_has_error; }
const char* FieldAccumulatorTCP_get_errors(void)
{	return stored_error; }
void FieldAccumulatorTCP_clear_errors(void)
{
	free(stored_error);
	stored_error = NULL;
	stored_has_error = 0;
}

static char FieldAccumulatorTCP_use_simulation[16];
static void FieldAccumulatorTCP_def_use_simulation(void)
{
	long pid = ((long) getpid()) % 100000;
	snprintf(FieldAccumulatorTCP_use_simulation, 16, "FieldAcc_%05ld_", pid);
}
static const char *FieldAccumulatorTCP_check_use_simulation(void)
{
	FieldAccumulatorTCP_def_use_simulation();
	const char *use_sim = max_config_get_string(MAX_CONFIG_USE_SIMULATION);
	if (use_sim == NULL) {
		use_sim = FieldAccumulatorTCP_use_simulation;
		max_config_set_string(MAX_CONFIG_USE_SIMULATION, use_sim);
	}
	return use_sim;
}

static int FieldAccumulatorTCP_simulation_launch = 0;
int FieldAccumulatorTCP_simulator_start(void)
{
	int retval = 0;
	const char *use_sim = FieldAccumulatorTCP_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils restart", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		if (strstr(buff, "Error")) {
			set_error(buff);
			retval = -1;
		}
	}
	pclose(pipe_fp);
	return retval;
}

int FieldAccumulatorTCP_simulator_stop(void)
{
	const char *use_sim = FieldAccumulatorTCP_check_use_simulation();
	char buff[1024];
	snprintf(buff, 1024, "PATH=simutils:$PATH maxcompilersim -d 1 -n %s -c MAX3424A -S simutils stop", use_sim);
	FILE *pipe_fp = popen(buff, "r");
	if (pipe_fp == NULL) {
		strncat(buff, " : failed to execute.", (1024 - strlen(buff)));
		set_error(buff);
		return -1;
	}
	while (fgets(buff, 1024, pipe_fp) != NULL) {
		/* Uncomment this to get simulator command output */
		/* fprintf(stderr, buff); */
		;
	}
	pclose(pipe_fp);
	return 0;
}

static void FieldAccumulatorTCP_static_init(void) 
{
	stored_maxfile = FieldAccumulatorTCP_init();
	if (stored_maxfile == NULL || !max_ok(stored_maxfile->errors)) {
		stored_maxfile = NULL;
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) abort();
		else { set_error("Unable to load maxfile"); return; }
	}
	if(!max_ok(max_global_errors())) {
		set_error_and_free(max_errors_trace(max_global_errors()));
		return;
	}
	if(!max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR))
		max_errors_mode(stored_maxfile->errors, 0);
	time_t timeout_previous = max_load_timeout(stored_maxfile, 30);
	const char *use_sim = FieldAccumulatorTCP_check_use_simulation();
	if (max_ping_daemon(stored_maxfile, use_sim) == 0) {
		int sim_stat = FieldAccumulatorTCP_simulator_start();
		if ((sim_stat == 0) && (max_ping_daemon(stored_maxfile, use_sim) == 1)) {
			FieldAccumulatorTCP_simulation_launch = 1;
		} else {
			set_error("Error: An error occurred while trying to start the simulation infrastructure automatically.");
			set_error("Error: Check that 'use_simulation=<simulator_name>' is set correctly in your SLiC configuration");
			set_error("Error: and that the associated simulated system daemon is running.");
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		}
	}
	stored_engine = max_load(stored_maxfile, "*");
	if (!max_ok(stored_maxfile->errors)) {
		if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) {
			fprintf(stderr, "\nUnable to load engine: aborting now.\n\n");
			fflush(stderr);
			abort();
		} else {
			set_error_and_free(max_errors_trace(stored_maxfile->errors));
			max_file_free(stored_maxfile);
			stored_maxfile = NULL;
			return;
		} 
	} 
	max_load_timeout(stored_maxfile, timeout_previous);
}
void FieldAccumulatorTCP_free(void)
{
	if (stored_engine != NULL) {
		max_unload(stored_engine);
		stored_engine = NULL;
	}
	if (stored_maxfile != NULL) {
		max_file_free(stored_maxfile);
		stored_maxfile = NULL;
	}
	if (stored_error != NULL) {
		free(stored_error);
		stored_error = NULL;
	}
	if (FieldAccumulatorTCP_simulation_launch == 1) {
		int sim_stat = FieldAccumulatorTCP_simulator_stop();
		if (sim_stat != 0 ) {
			fprintf(stderr, "Error stopping simulator.");
		}
		FieldAccumulatorTCP_simulation_launch = 0;
	}
}

static int FieldAccumulatorTCP_get_pcie_alignment(void)
{
#ifdef FieldAccumulatorTCP_PCIE_ALIGNMENT
	return ((FieldAccumulatorTCP_PCIE_ALIGNMENT < 1) ? 16 : FieldAccumulatorTCP_PCIE_ALIGNMENT);
#else
	return 16;
#endif
}

static int FieldAccumulatorTCP_check_aligned(const void *data)
{
	uintptr_t pointer = (uintptr_t) data;
	int alignment = FieldAccumulatorTCP_get_pcie_alignment();
	return (pointer % alignment) ? 1 : 0;
}

static void *FieldAccumulatorTCP_malloc_aligned(const size_t size)
{
	void *ptr;
	int alignment = FieldAccumulatorTCP_get_pcie_alignment();
	posix_memalign(&ptr, alignment, size);
	return ptr;
}



/*----------------------------------------------------------------------------*/
/*---------------------------- Interface default -----------------------------*/
/*----------------------------------------------------------------------------*/



#define CHECK_ERRORS_ST(ST, RET) if(!max_ok(ST->errors)) { if(max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n", max_errors_trace(ST->errors)); abort(); } set_error_and_free(max_errors_trace(ST->errors)); return RET; } 
#define CHECK_NULL(VALUE, MESSAGE, RET) if(VALUE == NULL) { if (max_config_get_bool(MAX_CONFIG_STATIC_INTERFACE_ABORT_ON_ERROR)) { fprintf(stderr, "%s\n%s\n", (stored_error == NULL) ? "" : stored_error, MESSAGE); abort(); } set_error(MESSAGE); return RET; }

 
typedef struct FieldAccumulatorTCP_callback_stream {
	uint8_t *user_ptr;
	uint8_t *aligned_ptr;
	size_t   size;
	int      is_output;
} FieldAccumulatorTCP_callback_stream_t;

typedef struct FieldAccumulatorTCP_callback_data {
	FieldAccumulatorTCP_callback_stream_t stream[2]; 
	int count;
	int max_count;
} FieldAccumulatorTCP_callback_data_t;

static void FieldAccumulatorTCP_callback_internal(void *cb_data)
{
	FieldAccumulatorTCP_callback_data_t *data = (FieldAccumulatorTCP_callback_data_t*) cb_data;
	for (int i = 0 ; i < data->count ; i++ ) {
		FieldAccumulatorTCP_callback_stream_t *s = &data->stream[i];
		if (s->is_output && (s->size > 0)) {
			memcpy(s->user_ptr, s->aligned_ptr, s->size);
		}
		free(s->aligned_ptr);
	}
	free(data);
}

static max_actions_t* FieldAccumulatorTCP_convert_internal(
	max_file_t *maxfile,
	FieldAccumulatorTCP_actions_t *interface_actions,
	int  is_internal_call,
	void (**callback_func)(void*),
	void **callback_data)
{
	max_actions_t *actions = max_actions_init(maxfile, NULL);
	if(actions == NULL) return NULL;

#define CHECK_ERRORS if(!max_ok(actions->errors)) { set_error_and_free(max_errors_trace(actions->errors)); return NULL; } 

	FieldAccumulatorTCP_callback_data_t *cb_data = NULL;
	int use_callback = (callback_func != NULL) && (callback_data != NULL);
	if (use_callback) {
		cb_data = malloc(sizeof(FieldAccumulatorTCP_callback_data_t));
		if (cb_data == NULL) {
			fprintf(stderr, "Unable to allocate memory for stream callback data in function FieldAccumulatorTCP_convert_internal\n");
			return NULL;
		}
		cb_data->max_count = 2;
		cb_data->count     = 0;
		*callback_data     = cb_data;
		*callback_func     = &FieldAccumulatorTCP_callback_internal;
	}

	/* code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount */
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount = interface_actions->outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount;
	max_get_uint64t(actions, "SlicerFramer_network_mgmt_stream_from_host_tx_framed", "eofCount", outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount);
	CHECK_ERRORS;
	/* end of code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.eofCount*/
	
	/* code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount */
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount = interface_actions->outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount;
	max_get_uint64t(actions, "SlicerFramer_network_mgmt_stream_from_host_tx_framed", "sofCount", outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount);
	CHECK_ERRORS;
	/* end of code for scalar SlicerFramer_network_mgmt_stream_from_host_tx_framed.sofCount*/
	
	max_ignore_scalar(actions, "ch2_sfp1_arp_server", "ip_address" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_arp_server", "mac_address" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_eth_rx_to_host_drop", "badFramesCounter" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_eth_rx_to_host_filter", "enable" );
	CHECK_ERRORS;
	
	max_ignore_scalar(actions, "ch2_sfp1_eth_tx_from_host_rem_conv", "badFramesCounter" );
	CHECK_ERRORS;
	
	/* code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount = interface_actions->outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount;
	max_get_uint64t(actions, "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor", "eofCount", outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount);
	CHECK_ERRORS;
	/* end of code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.eofCount*/
	
	/* code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount */
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount = interface_actions->outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount;
	max_get_uint64t(actions, "network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor", "sofCount", outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount);
	CHECK_ERRORS;
	/* end of code for scalar network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor.sofCount*/
	
	/* code for stream network_mgmt_stream_from_host_tx_framed */
	size_t instream_size_network_mgmt_stream_from_host_tx_framed = interface_actions->instream_size_network_mgmt_stream_from_host_tx_framed;
	if (instream_size_network_mgmt_stream_from_host_tx_framed > 0) {
		const void *stream_ptr = interface_actions->instream_network_mgmt_stream_from_host_tx_framed;
		if (use_callback && (1 == FieldAccumulatorTCP_check_aligned(interface_actions->instream_network_mgmt_stream_from_host_tx_framed))) {
			void *aligned_instream_network_mgmt_stream_from_host_tx_framed = malloc(instream_size_network_mgmt_stream_from_host_tx_framed);
			if (aligned_instream_network_mgmt_stream_from_host_tx_framed == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'network_mgmt_stream_from_host_tx_framed'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->instream_network_mgmt_stream_from_host_tx_framed;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_instream_network_mgmt_stream_from_host_tx_framed;
			(&cb_data->stream[cb_data->count])->size        = instream_size_network_mgmt_stream_from_host_tx_framed;
			(&cb_data->stream[cb_data->count])->is_output   = 0;
			cb_data->count += 1;
			memcpy(aligned_instream_network_mgmt_stream_from_host_tx_framed, interface_actions->instream_network_mgmt_stream_from_host_tx_framed, instream_size_network_mgmt_stream_from_host_tx_framed);
			stream_ptr = aligned_instream_network_mgmt_stream_from_host_tx_framed;
		}
		max_queue_input(actions, "network_mgmt_stream_from_host_tx_framed", stream_ptr, instream_size_network_mgmt_stream_from_host_tx_framed);
		CHECK_ERRORS;
	}
	/* end of code for stream network_mgmt_stream_from_host_tx_framed */
	
	/* code for stream network_mgmt_stream_to_host_rx_framed */
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed = interface_actions->outstream_size_network_mgmt_stream_to_host_rx_framed;
	if (outstream_size_network_mgmt_stream_to_host_rx_framed > 0) {
		void *stream_ptr = interface_actions->outstream_network_mgmt_stream_to_host_rx_framed;
		if (use_callback && (1 == FieldAccumulatorTCP_check_aligned(interface_actions->outstream_network_mgmt_stream_to_host_rx_framed))) {
			void *aligned_outstream_network_mgmt_stream_to_host_rx_framed = malloc(outstream_size_network_mgmt_stream_to_host_rx_framed);
			if (aligned_outstream_network_mgmt_stream_to_host_rx_framed == NULL) {
				max_report_error_slic(actions->errors, __FILE__, __LINE__, 526, "Failed to allocate aligned memory for stream 'network_mgmt_stream_to_host_rx_framed'");
				CHECK_ERRORS;
			}
			(&cb_data->stream[cb_data->count])->user_ptr    = (uint8_t*) interface_actions->outstream_network_mgmt_stream_to_host_rx_framed;
			(&cb_data->stream[cb_data->count])->aligned_ptr = (uint8_t*) aligned_outstream_network_mgmt_stream_to_host_rx_framed;
			(&cb_data->stream[cb_data->count])->size        = outstream_size_network_mgmt_stream_to_host_rx_framed;
			(&cb_data->stream[cb_data->count])->is_output   = 1;
			cb_data->count += 1;
			stream_ptr = aligned_outstream_network_mgmt_stream_to_host_rx_framed;
		}
		max_queue_output(actions, "network_mgmt_stream_to_host_rx_framed", stream_ptr, outstream_size_network_mgmt_stream_to_host_rx_framed);
		CHECK_ERRORS;
	}
	/* end of code for stream network_mgmt_stream_to_host_rx_framed */
	
	max_ignore_mem(actions, "ch2_sfp1_icmp_echo_server", "params" );
	CHECK_ERRORS;
	
	if (use_callback && cb_data->count == 0) {
		*callback_data = NULL;
		*callback_func = NULL;
		free(cb_data);
	}
	return actions;
#undef CHECK_ERRORS
}

void FieldAccumulatorTCP(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed)
{
	(void) pthread_once(&slic_bs_is_initialised, FieldAccumulatorTCP_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", );
	max_run_t *run = FieldAccumulatorTCP_nonblock(outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount, outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount, outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount, outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount, instream_network_mgmt_stream_from_host_tx_framed, instream_size_network_mgmt_stream_from_host_tx_framed, outstream_network_mgmt_stream_to_host_rx_framed, outstream_size_network_mgmt_stream_to_host_rx_framed);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *FieldAccumulatorTCP_nonblock(
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount,
	uint64_t *outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount,
	uint64_t *outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount,
	const void *instream_network_mgmt_stream_from_host_tx_framed,
	size_t instream_size_network_mgmt_stream_from_host_tx_framed,
	void *outstream_network_mgmt_stream_to_host_rx_framed,
	size_t outstream_size_network_mgmt_stream_to_host_rx_framed)
{
	FieldAccumulatorTCP_actions_t interface_actions;
	interface_actions.outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount = outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_eofCount;
	interface_actions.outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount = outscalar_SlicerFramer_network_mgmt_stream_from_host_tx_framed_sofCount;
	interface_actions.outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount = outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_eofCount;
	interface_actions.outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount = outscalar_network_mgmt_stream_to_host_rx_framed_FramedStreamPreprocessor_sofCount;
	interface_actions.instream_network_mgmt_stream_from_host_tx_framed = instream_network_mgmt_stream_from_host_tx_framed;
	interface_actions.instream_size_network_mgmt_stream_from_host_tx_framed = instream_size_network_mgmt_stream_from_host_tx_framed;
	interface_actions.outstream_network_mgmt_stream_to_host_rx_framed = outstream_network_mgmt_stream_to_host_rx_framed;
	interface_actions.outstream_size_network_mgmt_stream_to_host_rx_framed = outstream_size_network_mgmt_stream_to_host_rx_framed;
	(void) pthread_once(&slic_bs_is_initialised, FieldAccumulatorTCP_static_init);
	CHECK_NULL(stored_maxfile, "Maxfile was not loaded", NULL);
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = FieldAccumulatorTCP_convert_internal(stored_maxfile, &interface_actions, 1, &cb_func, &cb_data);
	CHECK_NULL(actions, "Unable to build actions", NULL);
	max_validate(actions);
	CHECK_ERRORS_ST(actions, NULL);
	CHECK_ERRORS_ST(stored_engine, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(stored_engine, actions);
	} else {
		run = max_run_nonblock_with_cb(stored_engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	CHECK_ERRORS_ST(actions, NULL);
	max_actions_free(actions);
	return run;
}

void FieldAccumulatorTCP_run(
	max_engine_t *engine,
	FieldAccumulatorTCP_actions_t *interface_actions)
{
	max_run_t *run = FieldAccumulatorTCP_run_nonblock(engine, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}

max_run_t *FieldAccumulatorTCP_run_nonblock(
	max_engine_t *engine,
	FieldAccumulatorTCP_actions_t *interface_actions)
{
	max_file_t *maxfile = max_engine_get_max_file(engine); 
	void (*cb_func)(void*) = NULL;
	void  *cb_data         = NULL;
	max_actions_t *actions = FieldAccumulatorTCP_convert_internal(maxfile, interface_actions, 1, &cb_func, &cb_data);
	CHECK_ERRORS_ST(actions, NULL);
	max_run_t *run;
	if (cb_func == NULL) {
		run = max_run_nonblock(engine, actions);
	} else {
		run = max_run_nonblock_with_cb(engine, actions, cb_func, cb_data);
	}
	CHECK_NULL(run, "Unable to run actions", NULL);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Group run advanced static function for the interface 'default'.
 * 
 * \param [in] group Group to use.
 * \param [in,out] interface_actions Actions to run.
 *
 * Run the actions on the first device available in the group.
 */
void FieldAccumulatorTCP_run_group(max_group_t *group, FieldAccumulatorTCP_actions_t *interface_actions)
{
	max_run_t *run = FieldAccumulatorTCP_run_group_nonblock(group, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Group run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule the actions to run on the first device available in the group and return immediately.
 * The status of the run must be checked with ::max_wait. 
 * Note that use of ::max_nowait is prohibited with non-blocking running on groups:
 * see the ::max_run_group_nonblock documentation for more explanation.
 *
 * \param [in] group Group to use.
 * \param [in] interface_actions Actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldAccumulatorTCP_run_group_nonblock(max_group_t *group, FieldAccumulatorTCP_actions_t *interface_actions)
{
	max_file_t *maxfile = max_group_get_max_file(group);
	max_actions_t *actions = FieldAccumulatorTCP_convert_internal(maxfile, interface_actions, 1, NULL, NULL);
	if(actions == NULL) return NULL;
	if(!max_ok(actions->errors)) return NULL;
	max_validate(actions);
	max_run_t *run = max_run_group_nonblock(group, actions);
	max_actions_free(actions);
	return run;
}


/**
 * \brief Array run advanced static function for the interface 'default'.
 * 
 * \param [in] engarray The array of devices to use.
 * \param [in,out] interface_actions The array of actions to run.
 *
 * Run the array of actions on the array of engines.  The length of interface_actions
 * must match the size of engarray.
 */
void FieldAccumulatorTCP_run_array(max_engarray_t *engarray, FieldAccumulatorTCP_actions_t *interface_actions[])
{
	max_run_t *run = FieldAccumulatorTCP_run_array_nonblock(engarray, interface_actions);
	CHECK_NULL(run, "Unable to run actions", );
	max_wait(run);
}


/**
 * \brief Array run advanced static non-blocking function for the interface 'default'.
 * 
 *
 * Schedule to run the array of actions on the array of engines, and return immediately.
 * The length of interface_actions must match the size of engarray.
 * The status of the run can be checked either by ::max_wait or ::max_nowait;
 * note that one of these *must* be called, so that associated memory can be released.
 *
 * \param [in] engarray The array of devices to use.
 * \param [in] interface_actions The array of actions to run.
 * \return A handle on the execution status of the actions, or NULL in case of error.
 */
max_run_t *FieldAccumulatorTCP_run_array_nonblock(max_engarray_t *engarray, FieldAccumulatorTCP_actions_t *interface_actions[])
{
	max_file_t *maxfile = max_engarray_get_max_file(engarray, 0);
	int i;
	max_actarray_t *actarray = max_actarray_init(maxfile, engarray->size);
	if (actarray == NULL) return NULL;
	max_actions_t **arr_actions = malloc(engarray->size * sizeof(max_actions_t*));
	for ( i = 0 ; i < actarray->size; i++ ) {
		max_actions_t *actions = FieldAccumulatorTCP_convert_internal(maxfile, interface_actions[i], 1, NULL, NULL);
		if (actions == NULL) return NULL;
		arr_actions[i] = actions;
		max_set_action(actarray, i, actions);
	}
	max_run_t *run = max_run_array_nonblock(engarray, actarray);
	for ( i = 0 ; i < actarray->size ; i++ ) { max_actions_free(arr_actions[i]); }
	max_actarray_free(actarray);
	free(arr_actions);
	return run;
}


/**
 * \brief Converts a static-interface action struct into a dynamic-interface max_actions_t struct.
 *
 * Note that this is an internal utility function used by other functions in the static interface.
 *
 * \param [in] maxfile The maxfile to use.
 * \param [in] interface_actions The interface-specific actions to run.
 * \return The dynamic-interface actions to run, or NULL in case of error.
 */
max_actions_t* FieldAccumulatorTCP_convert(max_file_t *maxfile, FieldAccumulatorTCP_actions_t *interface_actions)
{
	return FieldAccumulatorTCP_convert_internal(maxfile, interface_actions, 0, NULL, NULL);
}

#undef CHECK_ERRORS_ST
#undef CHECK_NULL



#endif /* SLIC_USE_DEFINITIONS */

#ifdef SLIC_DYNAMIC_CODE
SLIC_MODE_START(default)	
SLIC_SCALAR_DISABLED(ch2_sfp1_arp_server, ip_address)	
SLIC_SCALAR_DISABLED(ch2_sfp1_arp_server, mac_address)	
SLIC_SCALAR_DISABLED(ch2_sfp1_eth_rx_to_host_drop, badFramesCounter)	
SLIC_SCALAR_DISABLED(ch2_sfp1_eth_rx_to_host_filter, enable)	
SLIC_SCALAR_DISABLED(ch2_sfp1_eth_tx_from_host_rem_conv, badFramesCounter)	
SLIC_ROM_DISABLED(ch2_sfp1_icmp_echo_server, params)	
SLIC_MODE_END(default)

#endif /* SLIC_DYNAMIC_CODE */

#ifdef SKIN_META_DATA
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PG1h
eGZpbGUgZm9ybWF0LXZlcnNpb249IjIwMTIwMjAwIiBoZWFkZXI9IkZpZWxkQWNjdW11bGF0b3JU
Q1AuaCIgbmFtZT0iRmllbGRBY2N1bXVsYXRvclRDUCI+PGNvbnN0YW50IG5hbWU9IlBDSUVfQUxJ
R05NRU5UIiB0eXBlPSJsb25nIiB2YWx1ZT0iMTYiLz48Y29uc3RhbnQgbmFtZT0iVVNFX05FVFdP
UktfTUFOQUdFUiIgdHlwZT0ibG9uZyIgdmFsdWU9IjEiLz48ZW5naW5lbW9kZSBuYW1lPSJkZWZh
dWx0Ij48ZnVuY3Rpb24gbmFtZT0iRmllbGRBY2N1bXVsYXRvclRDUCIgcmV0dXJuLXZhbHVlPSJ2
b2lkIj48c2NhbGFyIGRlc2M9Ik91dHB1dCBzY2FsYXIgcGFyYW1ldGVyICZxdW90O1NsaWNlckZy
YW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQuZW9mQ291bnQmcXVv
dDsuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3
b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfZW9mQ291bnQiIHR5cGU9InVpbnQ2
NF90Ii8+PHNjYWxhciBkZXNjPSJPdXRwdXQgc2NhbGFyIHBhcmFtZXRlciAmcXVvdDtTbGljZXJG
cmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkLnNvZkNvdW50JnF1
b3Q7LiIgZGlyZWN0aW9uPSJPdXRwdXQiIG5hbWU9Im91dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0
d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX3NvZkNvdW50IiB0eXBlPSJ1aW50
NjRfdCIvPjxzY2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBwYXJhbWV0ZXIgJnF1b3Q7bmV0d29y
a19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Iu
ZW9mQ291bnQmcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIgbmFtZT0ib3V0c2NhbGFyX25ldHdv
cmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29y
X2VvZkNvdW50IiB0eXBlPSJ1aW50NjRfdCIvPjxzY2FsYXIgZGVzYz0iT3V0cHV0IHNjYWxhciBw
YXJhbWV0ZXIgJnF1b3Q7bmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFt
ZWRTdHJlYW1QcmVwcm9jZXNzb3Iuc29mQ291bnQmcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1dCIg
bmFtZT0ib3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJh
bWVkU3RyZWFtUHJlcHJvY2Vzc29yX3NvZkNvdW50IiB0eXBlPSJ1aW50NjRfdCIvPjxhcnJheSBk
ZXNjPSJTdHJlYW0gJnF1b3Q7bmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVk
JnF1b3Q7LiIgZGlyZWN0aW9uPSJJbnB1dCIgbmFtZT0iaW5zdHJlYW1fbmV0d29ya19tZ210X3N0
cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkIiBzaXplPSJpbnN0cmVhbV9zaXplX25ldHdvcmtfbWdt
dF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCIgdHJhbnNwb3NlPSJmYWxzZSIgdHlwZT0idm9p
ZCIvPjxzY2FsYXIgZGVzYz0iVGhlIHNpemUgb2YgdGhlIHN0cmVhbSBpbnN0cmVhbV9uZXR3b3Jr
X21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQgaW4gYnl0ZXMuIiBkaXJlY3Rpb249Iklu
cHV0IiBuYW1lPSJpbnN0cmVhbV9zaXplX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4
X2ZyYW1lZCIgdHlwZT0idWludDY0X3QiLz48YXJyYXkgZGVzYz0iU3RyZWFtICZxdW90O25ldHdv
cmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQmcXVvdDsuIiBkaXJlY3Rpb249Ik91dHB1
dCIgbmFtZT0ib3V0c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQi
IHNpemU9Im91dHN0cmVhbV9zaXplX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFt
ZWQiIHRyYW5zcG9zZT0iZmFsc2UiIHR5cGU9InZvaWQiLz48c2NhbGFyIGRlc2M9IlRoZSBzaXpl
IG9mIHRoZSBzdHJlYW0gb3V0c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9m
cmFtZWQgaW4gYnl0ZXMuIiBkaXJlY3Rpb249IklucHV0IiBuYW1lPSJvdXRzdHJlYW1fc2l6ZV9u
ZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkIiB0eXBlPSJ1aW50NjRfdCIvPjwv
ZnVuY3Rpb24+PC9lbmdpbmVtb2RlPjwvbWF4ZmlsZT4=
#endif /* SKIN_META_DATA */

#ifdef SLIC_B64_DEFINITIONS
I2luY2x1ZGUgPHN0ZGlvLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxwdGhyZWFkLmg+
CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHVuaXN0ZC5oPgojaW5jbHVkZSA8c3RkbGli
Lmg+CnN0YXRpYyBtYXhfZmlsZV90ICpzdG9yZWRfbWF4ZmlsZSA9IE5VTEw7CnN0YXRpYyBtYXhf
ZW5naW5lX3QgKnN0b3JlZF9lbmdpbmUgPSBOVUxMOwpzdGF0aWMgY2hhciAqc3RvcmVkX2Vycm9y
ID0gTlVMTDsKc3RhdGljIGludCBzdG9yZWRfaGFzX2Vycm9yID0gMDsKc3RhdGljIHB0aHJlYWRf
b25jZV90IHNsaWNfYnNfaXNfaW5pdGlhbGlzZWQgPSBQVEhSRUFEX09OQ0VfSU5JVDsKCnN0YXRp
YyB2b2lkIHNldF9lcnJvcihjb25zdCBjaGFyICplcnJvcl9zdHIpCnsKCXN0b3JlZF9oYXNfZXJy
b3IgPSAxOyAKCWlmKHN0b3JlZF9lcnJvciA9PSBOVUxMKSB7CgkJc3RvcmVkX2Vycm9yID0gc3Ry
ZHVwKGVycm9yX3N0cik7Cgl9IGVsc2UgewoJCWNoYXIgKm5lcnIgPSBtYWxsb2Moc3RybGVuKHN0
b3JlZF9lcnJvcikgKyBzdHJsZW4oZXJyb3Jfc3RyKSArIDIpOwoJCXNwcmludGYobmVyciwgIiVz
XG4lcyIsIHN0b3JlZF9lcnJvciwgZXJyb3Jfc3RyKTsKCQlmcmVlKHN0b3JlZF9lcnJvcik7CgkJ
c3RvcmVkX2Vycm9yID0gbmVycjsKCX0KfQpzdGF0aWMgdm9pZCBzZXRfZXJyb3JfYW5kX2ZyZWUo
Y2hhciAqZXJyb3Jfc3RyKXsKCXNldF9lcnJvcihlcnJvcl9zdHIpOwoJZnJlZShlcnJvcl9zdHIp
Owp9CmludCBGaWVsZEFjY3VtdWxhdG9yVENQX2hhc19lcnJvcnModm9pZCkKewlyZXR1cm4gc3Rv
cmVkX2hhc19lcnJvcjsgfQpjb25zdCBjaGFyKiBGaWVsZEFjY3VtdWxhdG9yVENQX2dldF9lcnJv
cnModm9pZCkKewlyZXR1cm4gc3RvcmVkX2Vycm9yOyB9CnZvaWQgRmllbGRBY2N1bXVsYXRvclRD
UF9jbGVhcl9lcnJvcnModm9pZCkKewoJZnJlZShzdG9yZWRfZXJyb3IpOwoJc3RvcmVkX2Vycm9y
ID0gTlVMTDsKCXN0b3JlZF9oYXNfZXJyb3IgPSAwOwp9CgpzdGF0aWMgY2hhciBGaWVsZEFjY3Vt
dWxhdG9yVENQX3VzZV9zaW11bGF0aW9uWzE2XTsKc3RhdGljIHZvaWQgRmllbGRBY2N1bXVsYXRv
clRDUF9kZWZfdXNlX3NpbXVsYXRpb24odm9pZCkKewoJbG9uZyBwaWQgPSAoKGxvbmcpIGdldHBp
ZCgpKSAlIDEwMDAwMDsKCXNucHJpbnRmKEZpZWxkQWNjdW11bGF0b3JUQ1BfdXNlX3NpbXVsYXRp
b24sIDE2LCAiRmllbGRBY2NfJTA1bGRfIiwgcGlkKTsKfQpzdGF0aWMgY29uc3QgY2hhciAqRmll
bGRBY2N1bXVsYXRvclRDUF9jaGVja191c2Vfc2ltdWxhdGlvbih2b2lkKQp7CglGaWVsZEFjY3Vt
dWxhdG9yVENQX2RlZl91c2Vfc2ltdWxhdGlvbigpOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IG1h
eF9jb25maWdfZ2V0X3N0cmluZyhNQVhfQ09ORklHX1VTRV9TSU1VTEFUSU9OKTsKCWlmICh1c2Vf
c2ltID09IE5VTEwpIHsKCQl1c2Vfc2ltID0gRmllbGRBY2N1bXVsYXRvclRDUF91c2Vfc2ltdWxh
dGlvbjsKCQltYXhfY29uZmlnX3NldF9zdHJpbmcoTUFYX0NPTkZJR19VU0VfU0lNVUxBVElPTiwg
dXNlX3NpbSk7Cgl9CglyZXR1cm4gdXNlX3NpbTsKfQoKc3RhdGljIGludCBGaWVsZEFjY3VtdWxh
dG9yVENQX3NpbXVsYXRpb25fbGF1bmNoID0gMDsKaW50IEZpZWxkQWNjdW11bGF0b3JUQ1Bfc2lt
dWxhdG9yX3N0YXJ0KHZvaWQpCnsKCWludCByZXR2YWwgPSAwOwoJY29uc3QgY2hhciAqdXNlX3Np
bSA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfY2hlY2tfdXNlX3NpbXVsYXRpb24oKTsKCWNoYXIgYnVm
ZlsxMDI0XTsKCXNucHJpbnRmKGJ1ZmYsIDEwMjQsICJQQVRIPXNpbXV0aWxzOiRQQVRIIG1heGNv
bXBpbGVyc2ltIC1kIDEgLW4gJXMgLWMgTUFYMzQyNEEgLVMgc2ltdXRpbHMgcmVzdGFydCIsIHVz
ZV9zaW0pOwoJRklMRSAqcGlwZV9mcCA9IHBvcGVuKGJ1ZmYsICJyIik7CglpZiAocGlwZV9mcCA9
PSBOVUxMKSB7CgkJc3RybmNhdChidWZmLCAiIDogZmFpbGVkIHRvIGV4ZWN1dGUuIiwgKDEwMjQg
LSBzdHJsZW4oYnVmZikpKTsKCQlzZXRfZXJyb3IoYnVmZik7CgkJcmV0dXJuIC0xOwoJfQoJd2hp
bGUgKGZnZXRzKGJ1ZmYsIDEwMjQsIHBpcGVfZnApICE9IE5VTEwpIHsKCQkvKiBVbmNvbW1lbnQg
dGhpcyB0byBnZXQgc2ltdWxhdG9yIGNvbW1hbmQgb3V0cHV0ICovCgkJLyogZnByaW50ZihzdGRl
cnIsIGJ1ZmYpOyAqLwoJCWlmIChzdHJzdHIoYnVmZiwgIkVycm9yIikpIHsKCQkJc2V0X2Vycm9y
KGJ1ZmYpOwoJCQlyZXR2YWwgPSAtMTsKCQl9Cgl9CglwY2xvc2UocGlwZV9mcCk7CglyZXR1cm4g
cmV0dmFsOwp9CgppbnQgRmllbGRBY2N1bXVsYXRvclRDUF9zaW11bGF0b3Jfc3RvcCh2b2lkKQp7
Cgljb25zdCBjaGFyICp1c2Vfc2ltID0gRmllbGRBY2N1bXVsYXRvclRDUF9jaGVja191c2Vfc2lt
dWxhdGlvbigpOwoJY2hhciBidWZmWzEwMjRdOwoJc25wcmludGYoYnVmZiwgMTAyNCwgIlBBVEg9
c2ltdXRpbHM6JFBBVEggbWF4Y29tcGlsZXJzaW0gLWQgMSAtbiAlcyAtYyBNQVgzNDI0QSAtUyBz
aW11dGlscyBzdG9wIiwgdXNlX3NpbSk7CglGSUxFICpwaXBlX2ZwID0gcG9wZW4oYnVmZiwgInIi
KTsKCWlmIChwaXBlX2ZwID09IE5VTEwpIHsKCQlzdHJuY2F0KGJ1ZmYsICIgOiBmYWlsZWQgdG8g
ZXhlY3V0ZS4iLCAoMTAyNCAtIHN0cmxlbihidWZmKSkpOwoJCXNldF9lcnJvcihidWZmKTsKCQly
ZXR1cm4gLTE7Cgl9Cgl3aGlsZSAoZmdldHMoYnVmZiwgMTAyNCwgcGlwZV9mcCkgIT0gTlVMTCkg
ewoJCS8qIFVuY29tbWVudCB0aGlzIHRvIGdldCBzaW11bGF0b3IgY29tbWFuZCBvdXRwdXQgKi8K
CQkvKiBmcHJpbnRmKHN0ZGVyciwgYnVmZik7ICovCgkJOwoJfQoJcGNsb3NlKHBpcGVfZnApOwoJ
cmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkIEZpZWxkQWNjdW11bGF0b3JUQ1Bfc3RhdGljX2luaXQo
dm9pZCkgCnsKCXN0b3JlZF9tYXhmaWxlID0gRmllbGRBY2N1bXVsYXRvclRDUF9pbml0KCk7Cglp
ZiAoc3RvcmVkX21heGZpbGUgPT0gTlVMTCB8fCAhbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKSB7CgkJc3RvcmVkX21heGZpbGUgPSBOVUxMOwoJCWlmKG1heF9jb25maWdfZ2V0X2Jvb2wo
TUFYX0NPTkZJR19TVEFUSUNfSU5URVJGQUNFX0FCT1JUX09OX0VSUk9SKSkgYWJvcnQoKTsKCQll
bHNlIHsgc2V0X2Vycm9yKCJVbmFibGUgdG8gbG9hZCBtYXhmaWxlIik7IHJldHVybjsgfQoJfQoJ
aWYoIW1heF9vayhtYXhfZ2xvYmFsX2Vycm9ycygpKSkgewoJCXNldF9lcnJvcl9hbmRfZnJlZSht
YXhfZXJyb3JzX3RyYWNlKG1heF9nbG9iYWxfZXJyb3JzKCkpKTsKCQlyZXR1cm47Cgl9CglpZigh
bWF4X2NvbmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05f
RVJST1IpKQoJCW1heF9lcnJvcnNfbW9kZShzdG9yZWRfbWF4ZmlsZS0+ZXJyb3JzLCAwKTsKCXRp
bWVfdCB0aW1lb3V0X3ByZXZpb3VzID0gbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4ZmlsZSwg
MzApOwoJY29uc3QgY2hhciAqdXNlX3NpbSA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfY2hlY2tfdXNl
X3NpbXVsYXRpb24oKTsKCWlmIChtYXhfcGluZ19kYWVtb24oc3RvcmVkX21heGZpbGUsIHVzZV9z
aW0pID09IDApIHsKCQlpbnQgc2ltX3N0YXQgPSBGaWVsZEFjY3VtdWxhdG9yVENQX3NpbXVsYXRv
cl9zdGFydCgpOwoJCWlmICgoc2ltX3N0YXQgPT0gMCkgJiYgKG1heF9waW5nX2RhZW1vbihzdG9y
ZWRfbWF4ZmlsZSwgdXNlX3NpbSkgPT0gMSkpIHsKCQkJRmllbGRBY2N1bXVsYXRvclRDUF9zaW11
bGF0aW9uX2xhdW5jaCA9IDE7CgkJfSBlbHNlIHsKCQkJc2V0X2Vycm9yKCJFcnJvcjogQW4gZXJy
b3Igb2NjdXJyZWQgd2hpbGUgdHJ5aW5nIHRvIHN0YXJ0IHRoZSBzaW11bGF0aW9uIGluZnJhc3Ry
dWN0dXJlIGF1dG9tYXRpY2FsbHkuIik7CgkJCXNldF9lcnJvcigiRXJyb3I6IENoZWNrIHRoYXQg
J3VzZV9zaW11bGF0aW9uPTxzaW11bGF0b3JfbmFtZT4nIGlzIHNldCBjb3JyZWN0bHkgaW4geW91
ciBTTGlDIGNvbmZpZ3VyYXRpb24iKTsKCQkJc2V0X2Vycm9yKCJFcnJvcjogYW5kIHRoYXQgdGhl
IGFzc29jaWF0ZWQgc2ltdWxhdGVkIHN5c3RlbSBkYWVtb24gaXMgcnVubmluZy4iKTsKCQkJbWF4
X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxlID0gTlVMTDsKCQkJ
cmV0dXJuOwoJCX0KCX0KCXN0b3JlZF9lbmdpbmUgPSBtYXhfbG9hZChzdG9yZWRfbWF4ZmlsZSwg
IioiKTsKCWlmICghbWF4X29rKHN0b3JlZF9tYXhmaWxlLT5lcnJvcnMpKSB7CgkJaWYobWF4X2Nv
bmZpZ19nZXRfYm9vbChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1Ip
KSB7CgkJCWZwcmludGYoc3RkZXJyLCAiXG5VbmFibGUgdG8gbG9hZCBlbmdpbmU6IGFib3J0aW5n
IG5vdy5cblxuIik7CgkJCWZmbHVzaChzdGRlcnIpOwoJCQlhYm9ydCgpOwoJCX0gZWxzZSB7CgkJ
CXNldF9lcnJvcl9hbmRfZnJlZShtYXhfZXJyb3JzX3RyYWNlKHN0b3JlZF9tYXhmaWxlLT5lcnJv
cnMpKTsKCQkJbWF4X2ZpbGVfZnJlZShzdG9yZWRfbWF4ZmlsZSk7CgkJCXN0b3JlZF9tYXhmaWxl
ID0gTlVMTDsKCQkJcmV0dXJuOwoJCX0gCgl9IAoJbWF4X2xvYWRfdGltZW91dChzdG9yZWRfbWF4
ZmlsZSwgdGltZW91dF9wcmV2aW91cyk7Cn0Kdm9pZCBGaWVsZEFjY3VtdWxhdG9yVENQX2ZyZWUo
dm9pZCkKewoJaWYgKHN0b3JlZF9lbmdpbmUgIT0gTlVMTCkgewoJCW1heF91bmxvYWQoc3RvcmVk
X2VuZ2luZSk7CgkJc3RvcmVkX2VuZ2luZSA9IE5VTEw7Cgl9CglpZiAoc3RvcmVkX21heGZpbGUg
IT0gTlVMTCkgewoJCW1heF9maWxlX2ZyZWUoc3RvcmVkX21heGZpbGUpOwoJCXN0b3JlZF9tYXhm
aWxlID0gTlVMTDsKCX0KCWlmIChzdG9yZWRfZXJyb3IgIT0gTlVMTCkgewoJCWZyZWUoc3RvcmVk
X2Vycm9yKTsKCQlzdG9yZWRfZXJyb3IgPSBOVUxMOwoJfQoJaWYgKEZpZWxkQWNjdW11bGF0b3JU
Q1Bfc2ltdWxhdGlvbl9sYXVuY2ggPT0gMSkgewoJCWludCBzaW1fc3RhdCA9IEZpZWxkQWNjdW11
bGF0b3JUQ1Bfc2ltdWxhdG9yX3N0b3AoKTsKCQlpZiAoc2ltX3N0YXQgIT0gMCApIHsKCQkJZnBy
aW50ZihzdGRlcnIsICJFcnJvciBzdG9wcGluZyBzaW11bGF0b3IuIik7CgkJfQoJCUZpZWxkQWNj
dW11bGF0b3JUQ1Bfc2ltdWxhdGlvbl9sYXVuY2ggPSAwOwoJfQp9CgpzdGF0aWMgaW50IEZpZWxk
QWNjdW11bGF0b3JUQ1BfZ2V0X3BjaWVfYWxpZ25tZW50KHZvaWQpCnsKI2lmZGVmIEZpZWxkQWNj
dW11bGF0b3JUQ1BfUENJRV9BTElHTk1FTlQKCXJldHVybiAoKEZpZWxkQWNjdW11bGF0b3JUQ1Bf
UENJRV9BTElHTk1FTlQgPCAxKSA/IDE2IDogRmllbGRBY2N1bXVsYXRvclRDUF9QQ0lFX0FMSUdO
TUVOVCk7CiNlbHNlCglyZXR1cm4gMTY7CiNlbmRpZgp9CgpzdGF0aWMgaW50IEZpZWxkQWNjdW11
bGF0b3JUQ1BfY2hlY2tfYWxpZ25lZChjb25zdCB2b2lkICpkYXRhKQp7Cgl1aW50cHRyX3QgcG9p
bnRlciA9ICh1aW50cHRyX3QpIGRhdGE7CglpbnQgYWxpZ25tZW50ID0gRmllbGRBY2N1bXVsYXRv
clRDUF9nZXRfcGNpZV9hbGlnbm1lbnQoKTsKCXJldHVybiAocG9pbnRlciAlIGFsaWdubWVudCkg
PyAxIDogMDsKfQoKc3RhdGljIHZvaWQgKkZpZWxkQWNjdW11bGF0b3JUQ1BfbWFsbG9jX2FsaWdu
ZWQoY29uc3Qgc2l6ZV90IHNpemUpCnsKCXZvaWQgKnB0cjsKCWludCBhbGlnbm1lbnQgPSBGaWVs
ZEFjY3VtdWxhdG9yVENQX2dldF9wY2llX2FsaWdubWVudCgpOwoJcG9zaXhfbWVtYWxpZ24oJnB0
ciwgYWxpZ25tZW50LCBzaXplKTsKCXJldHVybiBwdHI7Cn0KCgoKLyotLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEludGVyZmFjZSBkZWZhdWx0IC0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi8KCgoK
I2RlZmluZSBDSEVDS19FUlJPUlNfU1QoU1QsIFJFVCkgaWYoIW1heF9vayhTVC0+ZXJyb3JzKSkg
eyBpZihtYXhfY29uZmlnX2dldF9ib29sKE1BWF9DT05GSUdfU1RBVElDX0lOVEVSRkFDRV9BQk9S
VF9PTl9FUlJPUikpIHsgZnByaW50ZihzdGRlcnIsICIlc1xuIiwgbWF4X2Vycm9yc190cmFjZShT
VC0+ZXJyb3JzKSk7IGFib3J0KCk7IH0gc2V0X2Vycm9yX2FuZF9mcmVlKG1heF9lcnJvcnNfdHJh
Y2UoU1QtPmVycm9ycykpOyByZXR1cm4gUkVUOyB9IAojZGVmaW5lIENIRUNLX05VTEwoVkFMVUUs
IE1FU1NBR0UsIFJFVCkgaWYoVkFMVUUgPT0gTlVMTCkgeyBpZiAobWF4X2NvbmZpZ19nZXRfYm9v
bChNQVhfQ09ORklHX1NUQVRJQ19JTlRFUkZBQ0VfQUJPUlRfT05fRVJST1IpKSB7IGZwcmludGYo
c3RkZXJyLCAiJXNcbiVzXG4iLCAoc3RvcmVkX2Vycm9yID09IE5VTEwpID8gIiIgOiBzdG9yZWRf
ZXJyb3IsIE1FU1NBR0UpOyBhYm9ydCgpOyB9IHNldF9lcnJvcihNRVNTQUdFKTsgcmV0dXJuIFJF
VDsgfQoKIAp0eXBlZGVmIHN0cnVjdCBGaWVsZEFjY3VtdWxhdG9yVENQX2NhbGxiYWNrX3N0cmVh
bSB7Cgl1aW50OF90ICp1c2VyX3B0cjsKCXVpbnQ4X3QgKmFsaWduZWRfcHRyOwoJc2l6ZV90ICAg
c2l6ZTsKCWludCAgICAgIGlzX291dHB1dDsKfSBGaWVsZEFjY3VtdWxhdG9yVENQX2NhbGxiYWNr
X3N0cmVhbV90OwoKdHlwZWRlZiBzdHJ1Y3QgRmllbGRBY2N1bXVsYXRvclRDUF9jYWxsYmFja19k
YXRhIHsKCUZpZWxkQWNjdW11bGF0b3JUQ1BfY2FsbGJhY2tfc3RyZWFtX3Qgc3RyZWFtWzJdOyAK
CWludCBjb3VudDsKCWludCBtYXhfY291bnQ7Cn0gRmllbGRBY2N1bXVsYXRvclRDUF9jYWxsYmFj
a19kYXRhX3Q7CgpzdGF0aWMgdm9pZCBGaWVsZEFjY3VtdWxhdG9yVENQX2NhbGxiYWNrX2ludGVy
bmFsKHZvaWQgKmNiX2RhdGEpCnsKCUZpZWxkQWNjdW11bGF0b3JUQ1BfY2FsbGJhY2tfZGF0YV90
ICpkYXRhID0gKEZpZWxkQWNjdW11bGF0b3JUQ1BfY2FsbGJhY2tfZGF0YV90KikgY2JfZGF0YTsK
CWZvciAoaW50IGkgPSAwIDsgaSA8IGRhdGEtPmNvdW50IDsgaSsrICkgewoJCUZpZWxkQWNjdW11
bGF0b3JUQ1BfY2FsbGJhY2tfc3RyZWFtX3QgKnMgPSAmZGF0YS0+c3RyZWFtW2ldOwoJCWlmIChz
LT5pc19vdXRwdXQgJiYgKHMtPnNpemUgPiAwKSkgewoJCQltZW1jcHkocy0+dXNlcl9wdHIsIHMt
PmFsaWduZWRfcHRyLCBzLT5zaXplKTsKCQl9CgkJZnJlZShzLT5hbGlnbmVkX3B0cik7Cgl9Cglm
cmVlKGRhdGEpOwp9CgpzdGF0aWMgbWF4X2FjdGlvbnNfdCogRmllbGRBY2N1bXVsYXRvclRDUF9j
b252ZXJ0X2ludGVybmFsKAoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSwKCUZpZWxkQWNjdW11bGF0b3JU
Q1BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9ucywKCWludCAgaXNfaW50ZXJuYWxfY2FsbCwK
CXZvaWQgKCoqY2FsbGJhY2tfZnVuYykodm9pZCopLAoJdm9pZCAqKmNhbGxiYWNrX2RhdGEpCnsK
CW1heF9hY3Rpb25zX3QgKmFjdGlvbnMgPSBtYXhfYWN0aW9uc19pbml0KG1heGZpbGUsIE5VTEwp
OwoJaWYoYWN0aW9ucyA9PSBOVUxMKSByZXR1cm4gTlVMTDsKCiNkZWZpbmUgQ0hFQ0tfRVJST1JT
IGlmKCFtYXhfb2soYWN0aW9ucy0+ZXJyb3JzKSkgeyBzZXRfZXJyb3JfYW5kX2ZyZWUobWF4X2Vy
cm9yc190cmFjZShhY3Rpb25zLT5lcnJvcnMpKTsgcmV0dXJuIE5VTEw7IH0gCgoJRmllbGRBY2N1
bXVsYXRvclRDUF9jYWxsYmFja19kYXRhX3QgKmNiX2RhdGEgPSBOVUxMOwoJaW50IHVzZV9jYWxs
YmFjayA9IChjYWxsYmFja19mdW5jICE9IE5VTEwpICYmIChjYWxsYmFja19kYXRhICE9IE5VTEwp
OwoJaWYgKHVzZV9jYWxsYmFjaykgewoJCWNiX2RhdGEgPSBtYWxsb2Moc2l6ZW9mKEZpZWxkQWNj
dW11bGF0b3JUQ1BfY2FsbGJhY2tfZGF0YV90KSk7CgkJaWYgKGNiX2RhdGEgPT0gTlVMTCkgewoJ
CQlmcHJpbnRmKHN0ZGVyciwgIlVuYWJsZSB0byBhbGxvY2F0ZSBtZW1vcnkgZm9yIHN0cmVhbSBj
YWxsYmFjayBkYXRhIGluIGZ1bmN0aW9uIEZpZWxkQWNjdW11bGF0b3JUQ1BfY29udmVydF9pbnRl
cm5hbFxuIik7CgkJCXJldHVybiBOVUxMOwoJCX0KCQljYl9kYXRhLT5tYXhfY291bnQgPSAyOwoJ
CWNiX2RhdGEtPmNvdW50ICAgICA9IDA7CgkJKmNhbGxiYWNrX2RhdGEgICAgID0gY2JfZGF0YTsK
CQkqY2FsbGJhY2tfZnVuYyAgICAgPSAmRmllbGRBY2N1bXVsYXRvclRDUF9jYWxsYmFja19pbnRl
cm5hbDsKCX0KCgkvKiBjb2RlIGZvciBzY2FsYXIgU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9z
dHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZC5lb2ZDb3VudCAqLwoJdWludDY0X3QgKm91dHNjYWxh
cl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX2Vv
ZkNvdW50ID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0d29y
a19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX2VvZkNvdW50OwoJbWF4X2dldF91aW50
NjR0KGFjdGlvbnMsICJTbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3Rf
dHhfZnJhbWVkIiwgImVvZkNvdW50Iiwgb3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3b3JrX21n
bXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfZW9mQ291bnQpOwoJQ0hFQ0tfRVJST1JTOwoJ
LyogZW5kIG9mIGNvZGUgZm9yIHNjYWxhciBTbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVh
bV9mcm9tX2hvc3RfdHhfZnJhbWVkLmVvZkNvdW50Ki8KCQoJLyogY29kZSBmb3Igc2NhbGFyIFNs
aWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQuc29mQ291
bnQgKi8KCXVpbnQ2NF90ICpvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJl
YW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9zb2ZDb3VudCA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRz
Y2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1l
ZF9zb2ZDb3VudDsKCW1heF9nZXRfdWludDY0dChhY3Rpb25zLCAiU2xpY2VyRnJhbWVyX25ldHdv
cmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCIsICJzb2ZDb3VudCIsIG91dHNjYWxh
cl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkX3Nv
ZkNvdW50KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgU2xpY2Vy
RnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZC5zb2ZDb3VudCov
CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMsICJjaDJfc2ZwMV9hcnBfc2VydmVyIiwgImlw
X2FkZHJlc3MiICk7CglDSEVDS19FUlJPUlM7CgkKCW1heF9pZ25vcmVfc2NhbGFyKGFjdGlvbnMs
ICJjaDJfc2ZwMV9hcnBfc2VydmVyIiwgIm1hY19hZGRyZXNzIiApOwoJQ0hFQ0tfRVJST1JTOwoJ
CgltYXhfaWdub3JlX3NjYWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfZXRoX3J4X3RvX2hvc3RfZHJv
cCIsICJiYWRGcmFtZXNDb3VudGVyIiApOwoJQ0hFQ0tfRVJST1JTOwoJCgltYXhfaWdub3JlX3Nj
YWxhcihhY3Rpb25zLCAiY2gyX3NmcDFfZXRoX3J4X3RvX2hvc3RfZmlsdGVyIiwgImVuYWJsZSIg
KTsKCUNIRUNLX0VSUk9SUzsKCQoJbWF4X2lnbm9yZV9zY2FsYXIoYWN0aW9ucywgImNoMl9zZnAx
X2V0aF90eF9mcm9tX2hvc3RfcmVtX2NvbnYiLCAiYmFkRnJhbWVzQ291bnRlciIgKTsKCUNIRUNL
X0VSUk9SUzsKCQoJLyogY29kZSBmb3Igc2NhbGFyIG5ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9z
dF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yLmVvZkNvdW50ICovCgl1aW50NjRf
dCAqb3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVk
U3RyZWFtUHJlcHJvY2Vzc29yX2VvZkNvdW50ID0gaW50ZXJmYWNlX2FjdGlvbnMtPm91dHNjYWxh
cl9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXBy
b2Nlc3Nvcl9lb2ZDb3VudDsKCW1heF9nZXRfdWludDY0dChhY3Rpb25zLCAibmV0d29ya19tZ210
X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3IiLCAiZW9m
Q291bnQiLCBvdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9G
cmFtZWRTdHJlYW1QcmVwcm9jZXNzb3JfZW9mQ291bnQpOwoJQ0hFQ0tfRVJST1JTOwoJLyogZW5k
IG9mIGNvZGUgZm9yIHNjYWxhciBuZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVk
X0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nvci5lb2ZDb3VudCovCgkKCS8qIGNvZGUgZm9yIHNjYWxh
ciBuZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXBy
b2Nlc3Nvci5zb2ZDb3VudCAqLwoJdWludDY0X3QgKm91dHNjYWxhcl9uZXR3b3JrX21nbXRfc3Ry
ZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nvcl9zb2ZDb3VudCA9
IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0
X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Jfc29mQ291bnQ7CgltYXhfZ2V0X3Vp
bnQ2NHQoYWN0aW9ucywgIm5ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJh
bWVkU3RyZWFtUHJlcHJvY2Vzc29yIiwgInNvZkNvdW50Iiwgb3V0c2NhbGFyX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX3NvZkNv
dW50KTsKCUNIRUNLX0VSUk9SUzsKCS8qIGVuZCBvZiBjb2RlIGZvciBzY2FsYXIgbmV0d29ya19t
Z210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1QcmVwcm9jZXNzb3Iuc29m
Q291bnQqLwoJCgkvKiBjb2RlIGZvciBzdHJlYW0gbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hv
c3RfdHhfZnJhbWVkICovCglzaXplX3QgaW5zdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFt
X2Zyb21faG9zdF90eF9mcmFtZWQgPSBpbnRlcmZhY2VfYWN0aW9ucy0+aW5zdHJlYW1fc2l6ZV9u
ZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQ7CglpZiAoaW5zdHJlYW1fc2l6
ZV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQgPiAwKSB7CgkJY29uc3Qg
dm9pZCAqc3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5pbnN0cmVhbV9uZXR3b3JrX21n
bXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQ7CgkJaWYgKHVzZV9jYWxsYmFjayAmJiAoMSA9
PSBGaWVsZEFjY3VtdWxhdG9yVENQX2NoZWNrX2FsaWduZWQoaW50ZXJmYWNlX2FjdGlvbnMtPmlu
c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCkpKSB7CgkJCXZv
aWQgKmFsaWduZWRfaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJh
bWVkID0gbWFsbG9jKGluc3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3Rf
dHhfZnJhbWVkKTsKCQkJaWYgKGFsaWduZWRfaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9m
cm9tX2hvc3RfdHhfZnJhbWVkID09IE5VTEwpIHsKCQkJCW1heF9yZXBvcnRfZXJyb3Jfc2xpYyhh
Y3Rpb25zLT5lcnJvcnMsIF9fRklMRV9fLCBfX0xJTkVfXywgNTI2LCAiRmFpbGVkIHRvIGFsbG9j
YXRlIGFsaWduZWQgbWVtb3J5IGZvciBzdHJlYW0gJ25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9o
b3N0X3R4X2ZyYW1lZCciKTsKCQkJCUNIRUNLX0VSUk9SUzsKCQkJfQoJCQkoJmNiX2RhdGEtPnN0
cmVhbVtjYl9kYXRhLT5jb3VudF0pLT51c2VyX3B0ciAgICA9ICh1aW50OF90KikgaW50ZXJmYWNl
X2FjdGlvbnMtPmluc3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1l
ZDsKCQkJKCZjYl9kYXRhLT5zdHJlYW1bY2JfZGF0YS0+Y291bnRdKS0+YWxpZ25lZF9wdHIgPSAo
dWludDhfdCopIGFsaWduZWRfaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3Rf
dHhfZnJhbWVkOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAg
ICAgICA9IGluc3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJh
bWVkOwoJCQkoJmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5pc19vdXRwdXQgICA9
IDA7CgkJCWNiX2RhdGEtPmNvdW50ICs9IDE7CgkJCW1lbWNweShhbGlnbmVkX2luc3RyZWFtX25l
dHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCwgaW50ZXJmYWNlX2FjdGlvbnMt
Pmluc3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCwgaW5zdHJl
YW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQpOwoJCQlzdHJl
YW1fcHRyID0gYWxpZ25lZF9pbnN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90
eF9mcmFtZWQ7CgkJfQoJCW1heF9xdWV1ZV9pbnB1dChhY3Rpb25zLCAibmV0d29ya19tZ210X3N0
cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVkIiwgc3RyZWFtX3B0ciwgaW5zdHJlYW1fc2l6ZV9uZXR3
b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWQpOwoJCUNIRUNLX0VSUk9SUzsKCX0K
CS8qIGVuZCBvZiBjb2RlIGZvciBzdHJlYW0gbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3Rf
dHhfZnJhbWVkICovCgkKCS8qIGNvZGUgZm9yIHN0cmVhbSBuZXR3b3JrX21nbXRfc3RyZWFtX3Rv
X2hvc3RfcnhfZnJhbWVkICovCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZCA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fc2l6
ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkOwoJaWYgKG91dHN0cmVhbV9z
aXplX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQgPiAwKSB7CgkJdm9pZCAq
c3RyZWFtX3B0ciA9IGludGVyZmFjZV9hY3Rpb25zLT5vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZDsKCQlpZiAodXNlX2NhbGxiYWNrICYmICgxID09IEZpZWxk
QWNjdW11bGF0b3JUQ1BfY2hlY2tfYWxpZ25lZChpbnRlcmZhY2VfYWN0aW9ucy0+b3V0c3RyZWFt
X25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQpKSkgewoJCQl2b2lkICphbGln
bmVkX291dHN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkID0gbWFs
bG9jKG91dHN0cmVhbV9zaXplX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQp
OwoJCQlpZiAoYWxpZ25lZF9vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4
X2ZyYW1lZCA9PSBOVUxMKSB7CgkJCQltYXhfcmVwb3J0X2Vycm9yX3NsaWMoYWN0aW9ucy0+ZXJy
b3JzLCBfX0ZJTEVfXywgX19MSU5FX18sIDUyNiwgIkZhaWxlZCB0byBhbGxvY2F0ZSBhbGlnbmVk
IG1lbW9yeSBmb3Igc3RyZWFtICduZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVk
JyIpOwoJCQkJQ0hFQ0tfRVJST1JTOwoJCQl9CgkJCSgmY2JfZGF0YS0+c3RyZWFtW2NiX2RhdGEt
PmNvdW50XSktPnVzZXJfcHRyICAgID0gKHVpbnQ4X3QqKSBpbnRlcmZhY2VfYWN0aW9ucy0+b3V0
c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQ7CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmFsaWduZWRfcHRyID0gKHVpbnQ4X3QqKSBhbGln
bmVkX291dHN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkOwoJCQko
JmNiX2RhdGEtPnN0cmVhbVtjYl9kYXRhLT5jb3VudF0pLT5zaXplICAgICAgICA9IG91dHN0cmVh
bV9zaXplX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQ7CgkJCSgmY2JfZGF0
YS0+c3RyZWFtW2NiX2RhdGEtPmNvdW50XSktPmlzX291dHB1dCAgID0gMTsKCQkJY2JfZGF0YS0+
Y291bnQgKz0gMTsKCQkJc3RyZWFtX3B0ciA9IGFsaWduZWRfb3V0c3RyZWFtX25ldHdvcmtfbWdt
dF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQ7CgkJfQoJCW1heF9xdWV1ZV9vdXRwdXQoYWN0aW9u
cywgIm5ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQiLCBzdHJlYW1fcHRyLCBv
dXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkKTsKCQlD
SEVDS19FUlJPUlM7Cgl9CgkvKiBlbmQgb2YgY29kZSBmb3Igc3RyZWFtIG5ldHdvcmtfbWdtdF9z
dHJlYW1fdG9faG9zdF9yeF9mcmFtZWQgKi8KCQoJbWF4X2lnbm9yZV9tZW0oYWN0aW9ucywgImNo
Ml9zZnAxX2ljbXBfZWNob19zZXJ2ZXIiLCAicGFyYW1zIiApOwoJQ0hFQ0tfRVJST1JTOwoJCglp
ZiAodXNlX2NhbGxiYWNrICYmIGNiX2RhdGEtPmNvdW50ID09IDApIHsKCQkqY2FsbGJhY2tfZGF0
YSA9IE5VTEw7CgkJKmNhbGxiYWNrX2Z1bmMgPSBOVUxMOwoJCWZyZWUoY2JfZGF0YSk7Cgl9Cgly
ZXR1cm4gYWN0aW9uczsKI3VuZGVmIENIRUNLX0VSUk9SUwp9Cgp2b2lkIEZpZWxkQWNjdW11bGF0
b3JUQ1AoCgl1aW50NjRfdCAqb3V0c2NhbGFyX1NsaWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3Ry
ZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfZW9mQ291bnQsCgl1aW50NjRfdCAqb3V0c2NhbGFyX1Ns
aWNlckZyYW1lcl9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfc29mQ291
bnQsCgl1aW50NjRfdCAqb3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9m
cmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX2VvZkNvdW50LAoJdWludDY0X3QgKm91dHNj
YWxhcl9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVBy
ZXByb2Nlc3Nvcl9zb2ZDb3VudCwKCWNvbnN0IHZvaWQgKmluc3RyZWFtX25ldHdvcmtfbWdtdF9z
dHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCwKCXNpemVfdCBpbnN0cmVhbV9zaXplX25ldHdvcmtf
bWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCwKCXZvaWQgKm91dHN0cmVhbV9uZXR3b3Jr
X21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkLAoJc2l6ZV90IG91dHN0cmVhbV9zaXplX25l
dHdvcmtfbWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWQpCnsKCSh2b2lkKSBwdGhyZWFkX29u
Y2UoJnNsaWNfYnNfaXNfaW5pdGlhbGlzZWQsIEZpZWxkQWNjdW11bGF0b3JUQ1Bfc3RhdGljX2lu
aXQpOwoJQ0hFQ0tfTlVMTChzdG9yZWRfbWF4ZmlsZSwgIk1heGZpbGUgd2FzIG5vdCBsb2FkZWQi
LCApOwoJbWF4X3J1bl90ICpydW4gPSBGaWVsZEFjY3VtdWxhdG9yVENQX25vbmJsb2NrKG91dHNj
YWxhcl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJhbWVk
X2VvZkNvdW50LCBvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJv
bV9ob3N0X3R4X2ZyYW1lZF9zb2ZDb3VudCwgb3V0c2NhbGFyX25ldHdvcmtfbWdtdF9zdHJlYW1f
dG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX2VvZkNvdW50LCBvdXRz
Y2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRTdHJlYW1Q
cmVwcm9jZXNzb3Jfc29mQ291bnQsIGluc3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9o
b3N0X3R4X2ZyYW1lZCwgaW5zdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9z
dF90eF9mcmFtZWQsIG91dHN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJh
bWVkLCBvdXRzdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVk
KTsKCUNIRUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgKTsKCW1heF93YWl0
KHJ1bik7Cn0KCm1heF9ydW5fdCAqRmllbGRBY2N1bXVsYXRvclRDUF9ub25ibG9jaygKCXVpbnQ2
NF90ICpvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0
X3R4X2ZyYW1lZF9lb2ZDb3VudCwKCXVpbnQ2NF90ICpvdXRzY2FsYXJfU2xpY2VyRnJhbWVyX25l
dHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9zb2ZDb3VudCwKCXVpbnQ2NF90
ICpvdXRzY2FsYXJfbmV0d29ya19tZ210X3N0cmVhbV90b19ob3N0X3J4X2ZyYW1lZF9GcmFtZWRT
dHJlYW1QcmVwcm9jZXNzb3JfZW9mQ291bnQsCgl1aW50NjRfdCAqb3V0c2NhbGFyX25ldHdvcmtf
bWdtdF9zdHJlYW1fdG9faG9zdF9yeF9mcmFtZWRfRnJhbWVkU3RyZWFtUHJlcHJvY2Vzc29yX3Nv
ZkNvdW50LAoJY29uc3Qgdm9pZCAqaW5zdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hv
c3RfdHhfZnJhbWVkLAoJc2l6ZV90IGluc3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9m
cm9tX2hvc3RfdHhfZnJhbWVkLAoJdm9pZCAqb3V0c3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1f
dG9faG9zdF9yeF9mcmFtZWQsCglzaXplX3Qgb3V0c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZCkKewoJRmllbGRBY2N1bXVsYXRvclRDUF9hY3Rpb25zX3Qg
aW50ZXJmYWNlX2FjdGlvbnM7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzY2FsYXJfU2xpY2VyRnJh
bWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9lb2ZDb3VudCA9IG91
dHNjYWxhcl9TbGljZXJGcmFtZXJfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJh
bWVkX2VvZkNvdW50OwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c2NhbGFyX1NsaWNlckZyYW1lcl9u
ZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFtZWRfc29mQ291bnQgPSBvdXRzY2Fs
YXJfU2xpY2VyRnJhbWVyX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZF9z
b2ZDb3VudDsKCWludGVyZmFjZV9hY3Rpb25zLm91dHNjYWxhcl9uZXR3b3JrX21nbXRfc3RyZWFt
X3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nvcl9lb2ZDb3VudCA9IG91
dHNjYWxhcl9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVh
bVByZXByb2Nlc3Nvcl9lb2ZDb3VudDsKCWludGVyZmFjZV9hY3Rpb25zLm91dHNjYWxhcl9uZXR3
b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJhbWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nv
cl9zb2ZDb3VudCA9IG91dHNjYWxhcl9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3RfcnhfZnJh
bWVkX0ZyYW1lZFN0cmVhbVByZXByb2Nlc3Nvcl9zb2ZDb3VudDsKCWludGVyZmFjZV9hY3Rpb25z
Lmluc3RyZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZCA9IGluc3Ry
ZWFtX25ldHdvcmtfbWdtdF9zdHJlYW1fZnJvbV9ob3N0X3R4X2ZyYW1lZDsKCWludGVyZmFjZV9h
Y3Rpb25zLmluc3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0cmVhbV9mcm9tX2hvc3RfdHhfZnJh
bWVkID0gaW5zdHJlYW1fc2l6ZV9uZXR3b3JrX21nbXRfc3RyZWFtX2Zyb21faG9zdF90eF9mcmFt
ZWQ7CglpbnRlcmZhY2VfYWN0aW9ucy5vdXRzdHJlYW1fbmV0d29ya19tZ210X3N0cmVhbV90b19o
b3N0X3J4X2ZyYW1lZCA9IG91dHN0cmVhbV9uZXR3b3JrX21nbXRfc3RyZWFtX3RvX2hvc3Rfcnhf
ZnJhbWVkOwoJaW50ZXJmYWNlX2FjdGlvbnMub3V0c3RyZWFtX3NpemVfbmV0d29ya19tZ210X3N0
cmVhbV90b19ob3N0X3J4X2ZyYW1lZCA9IG91dHN0cmVhbV9zaXplX25ldHdvcmtfbWdtdF9zdHJl
YW1fdG9faG9zdF9yeF9mcmFtZWQ7Cgkodm9pZCkgcHRocmVhZF9vbmNlKCZzbGljX2JzX2lzX2lu
aXRpYWxpc2VkLCBGaWVsZEFjY3VtdWxhdG9yVENQX3N0YXRpY19pbml0KTsKCUNIRUNLX05VTEwo
c3RvcmVkX21heGZpbGUsICJNYXhmaWxlIHdhcyBub3QgbG9hZGVkIiwgTlVMTCk7Cgl2b2lkICgq
Y2JfZnVuYykodm9pZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJ
bWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfY29udmVydF9pbnRl
cm5hbChzdG9yZWRfbWF4ZmlsZSwgJmludGVyZmFjZV9hY3Rpb25zLCAxLCAmY2JfZnVuYywgJmNi
X2RhdGEpOwoJQ0hFQ0tfTlVMTChhY3Rpb25zLCAiVW5hYmxlIHRvIGJ1aWxkIGFjdGlvbnMiLCBO
VUxMKTsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCUNIRUNLX0VSUk9SU19TVChhY3Rpb25zLCBO
VUxMKTsKCUNIRUNLX0VSUk9SU19TVChzdG9yZWRfZW5naW5lLCBOVUxMKTsKCW1heF9ydW5fdCAq
cnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVMTCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soc3Rv
cmVkX2VuZ2luZSwgYWN0aW9ucyk7Cgl9IGVsc2UgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2tf
d2l0aF9jYihzdG9yZWRfZW5naW5lLCBhY3Rpb25zLCBjYl9mdW5jLCBjYl9kYXRhKTsKCX0KCUNI
RUNLX05VTEwocnVuLCAiVW5hYmxlIHRvIHJ1biBhY3Rpb25zIiwgTlVMTCk7CglDSEVDS19FUlJP
UlNfU1QoYWN0aW9ucywgTlVMTCk7CgltYXhfYWN0aW9uc19mcmVlKGFjdGlvbnMpOwoJcmV0dXJu
IHJ1bjsKfQoKdm9pZCBGaWVsZEFjY3VtdWxhdG9yVENQX3J1bigKCW1heF9lbmdpbmVfdCAqZW5n
aW5lLAoJRmllbGRBY2N1bXVsYXRvclRDUF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfcnVuX3QgKnJ1biA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfcnVuX25vbmJsb2NrKGVuZ2lu
ZSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVMTChydW4sICJVbmFibGUgdG8gcnVuIGFj
dGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKbWF4X3J1bl90ICpGaWVsZEFjY3VtdWxhdG9y
VENQX3J1bl9ub25ibG9jaygKCW1heF9lbmdpbmVfdCAqZW5naW5lLAoJRmllbGRBY2N1bXVsYXRv
clRDUF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7CgltYXhfZmlsZV90ICptYXhmaWxl
ID0gbWF4X2VuZ2luZV9nZXRfbWF4X2ZpbGUoZW5naW5lKTsgCgl2b2lkICgqY2JfZnVuYykodm9p
ZCopID0gTlVMTDsKCXZvaWQgICpjYl9kYXRhICAgICAgICAgPSBOVUxMOwoJbWF4X2FjdGlvbnNf
dCAqYWN0aW9ucyA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfY29udmVydF9pbnRlcm5hbChtYXhmaWxl
LCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgJmNiX2Z1bmMsICZjYl9kYXRhKTsKCUNIRUNLX0VSUk9S
U19TVChhY3Rpb25zLCBOVUxMKTsKCW1heF9ydW5fdCAqcnVuOwoJaWYgKGNiX2Z1bmMgPT0gTlVM
TCkgewoJCXJ1biA9IG1heF9ydW5fbm9uYmxvY2soZW5naW5lLCBhY3Rpb25zKTsKCX0gZWxzZSB7
CgkJcnVuID0gbWF4X3J1bl9ub25ibG9ja193aXRoX2NiKGVuZ2luZSwgYWN0aW9ucywgY2JfZnVu
YywgY2JfZGF0YSk7Cgl9CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBydW4gYWN0aW9ucyIs
IE5VTEwpOwoJbWF4X2FjdGlvbnNfZnJlZShhY3Rpb25zKTsKCXJldHVybiBydW47Cn0KCgovKioK
ICogXGJyaWVmIEdyb3VwIHJ1biBhZHZhbmNlZCBzdGF0aWMgZnVuY3Rpb24gZm9yIHRoZSBpbnRl
cmZhY2UgJ2RlZmF1bHQnLgogKiAKICogXHBhcmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgog
KiBccGFyYW0gW2luLG91dF0gaW50ZXJmYWNlX2FjdGlvbnMgQWN0aW9ucyB0byBydW4uCiAqCiAq
IFJ1biB0aGUgYWN0aW9ucyBvbiB0aGUgZmlyc3QgZGV2aWNlIGF2YWlsYWJsZSBpbiB0aGUgZ3Jv
dXAuCiAqLwp2b2lkIEZpZWxkQWNjdW11bGF0b3JUQ1BfcnVuX2dyb3VwKG1heF9ncm91cF90ICpn
cm91cCwgRmllbGRBY2N1bXVsYXRvclRDUF9hY3Rpb25zX3QgKmludGVyZmFjZV9hY3Rpb25zKQp7
CgltYXhfcnVuX3QgKnJ1biA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfcnVuX2dyb3VwX25vbmJsb2Nr
KGdyb3VwLCBpbnRlcmZhY2VfYWN0aW9ucyk7CglDSEVDS19OVUxMKHJ1biwgIlVuYWJsZSB0byBy
dW4gYWN0aW9ucyIsICk7CgltYXhfd2FpdChydW4pOwp9CgoKLyoqCiAqIFxicmllZiBHcm91cCBy
dW4gYWR2YW5jZWQgc3RhdGljIG5vbi1ibG9ja2luZyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFj
ZSAnZGVmYXVsdCcuCiAqIAogKgogKiBTY2hlZHVsZSB0aGUgYWN0aW9ucyB0byBydW4gb24gdGhl
IGZpcnN0IGRldmljZSBhdmFpbGFibGUgaW4gdGhlIGdyb3VwIGFuZCByZXR1cm4gaW1tZWRpYXRl
bHkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBtdXN0IGJlIGNoZWNrZWQgd2l0aCA6Om1heF93
YWl0LiAKICogTm90ZSB0aGF0IHVzZSBvZiA6Om1heF9ub3dhaXQgaXMgcHJvaGliaXRlZCB3aXRo
IG5vbi1ibG9ja2luZyBydW5uaW5nIG9uIGdyb3VwczoKICogc2VlIHRoZSA6Om1heF9ydW5fZ3Jv
dXBfbm9uYmxvY2sgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBleHBsYW5hdGlvbi4KICoKICogXHBh
cmFtIFtpbl0gZ3JvdXAgR3JvdXAgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0
aW9ucyBBY3Rpb25zIHRvIHJ1bi4KICogXHJldHVybiBBIGhhbmRsZSBvbiB0aGUgZXhlY3V0aW9u
IHN0YXR1cyBvZiB0aGUgYWN0aW9ucywgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9yLgogKi8KbWF4
X3J1bl90ICpGaWVsZEFjY3VtdWxhdG9yVENQX3J1bl9ncm91cF9ub25ibG9jayhtYXhfZ3JvdXBf
dCAqZ3JvdXAsIEZpZWxkQWNjdW11bGF0b3JUQ1BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0aW9u
cykKewoJbWF4X2ZpbGVfdCAqbWF4ZmlsZSA9IG1heF9ncm91cF9nZXRfbWF4X2ZpbGUoZ3JvdXAp
OwoJbWF4X2FjdGlvbnNfdCAqYWN0aW9ucyA9IEZpZWxkQWNjdW11bGF0b3JUQ1BfY29udmVydF9p
bnRlcm5hbChtYXhmaWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMSwgTlVMTCwgTlVMTCk7CglpZihh
Y3Rpb25zID09IE5VTEwpIHJldHVybiBOVUxMOwoJaWYoIW1heF9vayhhY3Rpb25zLT5lcnJvcnMp
KSByZXR1cm4gTlVMTDsKCW1heF92YWxpZGF0ZShhY3Rpb25zKTsKCW1heF9ydW5fdCAqcnVuID0g
bWF4X3J1bl9ncm91cF9ub25ibG9jayhncm91cCwgYWN0aW9ucyk7CgltYXhfYWN0aW9uc19mcmVl
KGFjdGlvbnMpOwoJcmV0dXJuIHJ1bjsKfQoKCi8qKgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFu
Y2VkIHN0YXRpYyBmdW5jdGlvbiBmb3IgdGhlIGludGVyZmFjZSAnZGVmYXVsdCcuCiAqIAogKiBc
cGFyYW0gW2luXSBlbmdhcnJheSBUaGUgYXJyYXkgb2YgZGV2aWNlcyB0byB1c2UuCiAqIFxwYXJh
bSBbaW4sb3V0XSBpbnRlcmZhY2VfYWN0aW9ucyBUaGUgYXJyYXkgb2YgYWN0aW9ucyB0byBydW4u
CiAqCiAqIFJ1biB0aGUgYXJyYXkgb2YgYWN0aW9ucyBvbiB0aGUgYXJyYXkgb2YgZW5naW5lcy4g
IFRoZSBsZW5ndGggb2YgaW50ZXJmYWNlX2FjdGlvbnMKICogbXVzdCBtYXRjaCB0aGUgc2l6ZSBv
ZiBlbmdhcnJheS4KICovCnZvaWQgRmllbGRBY2N1bXVsYXRvclRDUF9ydW5fYXJyYXkobWF4X2Vu
Z2FycmF5X3QgKmVuZ2FycmF5LCBGaWVsZEFjY3VtdWxhdG9yVENQX2FjdGlvbnNfdCAqaW50ZXJm
YWNlX2FjdGlvbnNbXSkKewoJbWF4X3J1bl90ICpydW4gPSBGaWVsZEFjY3VtdWxhdG9yVENQX3J1
bl9hcnJheV9ub25ibG9jayhlbmdhcnJheSwgaW50ZXJmYWNlX2FjdGlvbnMpOwoJQ0hFQ0tfTlVM
TChydW4sICJVbmFibGUgdG8gcnVuIGFjdGlvbnMiLCApOwoJbWF4X3dhaXQocnVuKTsKfQoKCi8q
KgogKiBcYnJpZWYgQXJyYXkgcnVuIGFkdmFuY2VkIHN0YXRpYyBub24tYmxvY2tpbmcgZnVuY3Rp
b24gZm9yIHRoZSBpbnRlcmZhY2UgJ2RlZmF1bHQnLgogKiAKICoKICogU2NoZWR1bGUgdG8gcnVu
IHRoZSBhcnJheSBvZiBhY3Rpb25zIG9uIHRoZSBhcnJheSBvZiBlbmdpbmVzLCBhbmQgcmV0dXJu
IGltbWVkaWF0ZWx5LgogKiBUaGUgbGVuZ3RoIG9mIGludGVyZmFjZV9hY3Rpb25zIG11c3QgbWF0
Y2ggdGhlIHNpemUgb2YgZW5nYXJyYXkuCiAqIFRoZSBzdGF0dXMgb2YgdGhlIHJ1biBjYW4gYmUg
Y2hlY2tlZCBlaXRoZXIgYnkgOjptYXhfd2FpdCBvciA6Om1heF9ub3dhaXQ7CiAqIG5vdGUgdGhh
dCBvbmUgb2YgdGhlc2UgKm11c3QqIGJlIGNhbGxlZCwgc28gdGhhdCBhc3NvY2lhdGVkIG1lbW9y
eSBjYW4gYmUgcmVsZWFzZWQuCiAqCiAqIFxwYXJhbSBbaW5dIGVuZ2FycmF5IFRoZSBhcnJheSBv
ZiBkZXZpY2VzIHRvIHVzZS4KICogXHBhcmFtIFtpbl0gaW50ZXJmYWNlX2FjdGlvbnMgVGhlIGFy
cmF5IG9mIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIEEgaGFuZGxlIG9uIHRoZSBleGVjdXRp
b24gc3RhdHVzIG9mIHRoZSBhY3Rpb25zLCBvciBOVUxMIGluIGNhc2Ugb2YgZXJyb3IuCiAqLwpt
YXhfcnVuX3QgKkZpZWxkQWNjdW11bGF0b3JUQ1BfcnVuX2FycmF5X25vbmJsb2NrKG1heF9lbmdh
cnJheV90ICplbmdhcnJheSwgRmllbGRBY2N1bXVsYXRvclRDUF9hY3Rpb25zX3QgKmludGVyZmFj
ZV9hY3Rpb25zW10pCnsKCW1heF9maWxlX3QgKm1heGZpbGUgPSBtYXhfZW5nYXJyYXlfZ2V0X21h
eF9maWxlKGVuZ2FycmF5LCAwKTsKCWludCBpOwoJbWF4X2FjdGFycmF5X3QgKmFjdGFycmF5ID0g
bWF4X2FjdGFycmF5X2luaXQobWF4ZmlsZSwgZW5nYXJyYXktPnNpemUpOwoJaWYgKGFjdGFycmF5
ID09IE5VTEwpIHJldHVybiBOVUxMOwoJbWF4X2FjdGlvbnNfdCAqKmFycl9hY3Rpb25zID0gbWFs
bG9jKGVuZ2FycmF5LT5zaXplICogc2l6ZW9mKG1heF9hY3Rpb25zX3QqKSk7Cglmb3IgKCBpID0g
MCA7IGkgPCBhY3RhcnJheS0+c2l6ZTsgaSsrICkgewoJCW1heF9hY3Rpb25zX3QgKmFjdGlvbnMg
PSBGaWVsZEFjY3VtdWxhdG9yVENQX2NvbnZlcnRfaW50ZXJuYWwobWF4ZmlsZSwgaW50ZXJmYWNl
X2FjdGlvbnNbaV0sIDEsIE5VTEwsIE5VTEwpOwoJCWlmIChhY3Rpb25zID09IE5VTEwpIHJldHVy
biBOVUxMOwoJCWFycl9hY3Rpb25zW2ldID0gYWN0aW9uczsKCQltYXhfc2V0X2FjdGlvbihhY3Rh
cnJheSwgaSwgYWN0aW9ucyk7Cgl9CgltYXhfcnVuX3QgKnJ1biA9IG1heF9ydW5fYXJyYXlfbm9u
YmxvY2soZW5nYXJyYXksIGFjdGFycmF5KTsKCWZvciAoIGkgPSAwIDsgaSA8IGFjdGFycmF5LT5z
aXplIDsgaSsrICkgeyBtYXhfYWN0aW9uc19mcmVlKGFycl9hY3Rpb25zW2ldKTsgfQoJbWF4X2Fj
dGFycmF5X2ZyZWUoYWN0YXJyYXkpOwoJZnJlZShhcnJfYWN0aW9ucyk7CglyZXR1cm4gcnVuOwp9
CgoKLyoqCiAqIFxicmllZiBDb252ZXJ0cyBhIHN0YXRpYy1pbnRlcmZhY2UgYWN0aW9uIHN0cnVj
dCBpbnRvIGEgZHluYW1pYy1pbnRlcmZhY2UgbWF4X2FjdGlvbnNfdCBzdHJ1Y3QuCiAqCiAqIE5v
dGUgdGhhdCB0aGlzIGlzIGFuIGludGVybmFsIHV0aWxpdHkgZnVuY3Rpb24gdXNlZCBieSBvdGhl
ciBmdW5jdGlvbnMgaW4gdGhlIHN0YXRpYyBpbnRlcmZhY2UuCiAqCiAqIFxwYXJhbSBbaW5dIG1h
eGZpbGUgVGhlIG1heGZpbGUgdG8gdXNlLgogKiBccGFyYW0gW2luXSBpbnRlcmZhY2VfYWN0aW9u
cyBUaGUgaW50ZXJmYWNlLXNwZWNpZmljIGFjdGlvbnMgdG8gcnVuLgogKiBccmV0dXJuIFRoZSBk
eW5hbWljLWludGVyZmFjZSBhY3Rpb25zIHRvIHJ1biwgb3IgTlVMTCBpbiBjYXNlIG9mIGVycm9y
LgogKi8KbWF4X2FjdGlvbnNfdCogRmllbGRBY2N1bXVsYXRvclRDUF9jb252ZXJ0KG1heF9maWxl
X3QgKm1heGZpbGUsIEZpZWxkQWNjdW11bGF0b3JUQ1BfYWN0aW9uc190ICppbnRlcmZhY2VfYWN0
aW9ucykKewoJcmV0dXJuIEZpZWxkQWNjdW11bGF0b3JUQ1BfY29udmVydF9pbnRlcm5hbChtYXhm
aWxlLCBpbnRlcmZhY2VfYWN0aW9ucywgMCwgTlVMTCwgTlVMTCk7Cn0KCiN1bmRlZiBDSEVDS19F
UlJPUlNfU1QKI3VuZGVmIENIRUNLX05VTEwKCgo=
#endif /* SLIC_B64_DEFINITIONS */

#ifdef SLIC_EXTRA_FILES
PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiIHN0YW5kYWxvbmU9Im5vIj8+PHVz
ZXJmaWxlcyBmb3JtYXQtdmVyc2lvbj0iMjAxMjAyMDAiLz4=
#endif /* SLIC_EXTRA_FILES */

#ifdef PHOTON_NODE_ADD_DATA
#define PHOTON_NODE_ADD_DATA_PRESENT 1
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 148, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 4, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 5, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 6, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 7, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 8, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 9, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 15, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 16, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 19, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 180, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 58, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 59, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 179, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 178, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 29, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 30, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 10, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 25, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 31, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 32, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 177, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 61, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 150, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 64, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 65, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 88, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 89, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 149, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 90, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 123, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 124, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 125, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 126, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 170, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 118, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 119, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 135, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 169, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 116, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 117, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 133, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 168, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 121, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 122, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 131, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 167, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 11, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 12, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 129, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 166, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 165, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 164, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 111, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 97, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 153, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 151, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 99, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 100, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 101, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 102, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 155, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 152, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 104, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 105, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 106, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 107, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 108, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 94, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 34, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 35, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 33, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 157, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 36, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 40, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 38, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 39, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 41, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 42, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 43, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 158, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 44, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 159, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 45, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 46, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 47, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 66, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 48, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 49, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 67, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 68, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 176, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 69, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 160, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 71, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 80, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 161, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 74, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 175, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 174, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 73, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 162, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 76, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 77, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 85, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 95, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 163, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 96, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 109, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 110, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 113, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 112, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 114, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 130, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 132, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 134, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 136, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 127, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 142, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 173, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 139, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 140, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 141, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 143, "SquashFactor", 0.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 20, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 171, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 21, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 22, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 23, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 172, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 137, "SquashFactor", 1.0)
PHOTON_NODE_ADD_DATA(fieldAccumulatorKernel, 147, "SquashFactor", 0.0)
#endif

#ifdef MAXFILE_SIGNATURE
#define MAXFILE_SIGNATURE_PRESENT 1
MAXFILE_SIGNATURE("302c02147c6d5d88d52204439f90ce1e3f98d1f185f5850f021439b5769d298d783a08e5dba40d03fdebed4e6b16")
#endif

